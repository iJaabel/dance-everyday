var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.282,1,1.809]],["body/modules/AppModule.html",[0,2.084,1,3.454,2,1.574,3,1.574,4,1.991,5,1.991,6,1.574,7,2.627,8,1.991,9,2.659,10,2.659,11,2.955,12,0.041,13,2.955,14,2.627,15,1.991,16,1.991,17,0.386,18,0.327,19,0.327,20,3.238,21,3.003,22,0.63,23,0.744,24,3.238,25,3.238,26,2.277,27,1.574,28,2.277,29,3.238,30,3.238,31,1.574,32,0.386,33,0.095,34,0.022,35,0.029,36,0.022]],["title/injectables/ConvertDatePipe.html",[37,0.841,38,1.809]],["body/injectables/ConvertDatePipe.html",[12,0.04,17,0.432,18,0.365,19,0.365,22,0.432,23,0.832,32,0.432,33,0.107,34,0.025,35,0.031,36,0.025,37,1.313,38,2.824,39,1.76,40,2.973,41,0.432,42,1.621,43,3.228,44,3.77,45,0.914,46,0.657,47,3.621,48,1.278,49,0.741,50,0.503,51,1.278,52,2.546,53,1.278,54,3.228,55,2.546,56,1.578,57,3.621,58,1.419,59,3.621,60,1.278,61,3.621]],["title/classes/CreateEventDto.html",[33,0.087,62,1.43]],["body/classes/CreateEventDto.html",[12,0.04,17,0.386,18,0.327,19,0.327,22,0.386,32,0.386,33,0.126,34,0.022,35,0.029,36,0.022,41,0.386,45,1.019,46,0.922,49,0.979,50,0.706,62,2.076,63,1.143,64,2.659,65,2.076,66,2.084,67,2.603,68,2.323,69,1.992,70,3.507,71,3.238,72,3.89,73,3.238,74,3.238,75,3.238,76,3.361,77,1.763]],["title/classes/CreateVenueDto.html",[33,0.087,78,1.43]],["body/classes/CreateVenueDto.html",[12,0.04,17,0.38,18,0.321,19,0.321,22,0.38,32,0.38,33,0.125,34,0.022,35,0.029,36,0.022,41,0.38,45,1.015,46,0.916,49,0.971,50,0.701,63,1.125,65,2.054,69,1.98,70,3.47,72,3.334,76,3.334,77,1.735,78,2.054,79,2.616,80,3.334,81,3.334,82,3.334,83,3.187,84,3.187,85,3.187,86,3.187,87,3.551,88,3.187,89,4.227,90,1.959]],["title/classes/Event.html",[33,0.087,91,1.282]],["body/classes/Event.html",[12,0.04,17,0.32,18,0.271,19,0.271,22,0.448,32,0.32,33,0.079,34,0.018,35,0.026,36,0.018,41,0.32,45,0.93,46,0.93,49,0.888,50,0.746,63,0.947,65,1.827,66,2.157,67,2.362,69,2.011,91,1.638,92,2.202,93,2.311,94,3.562,95,3.562,96,1.891,97,1.811,98,3.562,99,2.682,100,4.212,101,2.682,102,2.682,103,3.758,104,3.758,105,3.758,106,2.682,107,2.049,108,3.562,109,2.682,110,2.682,111,2.682,112,2.202,113,2.682,114,3.085,115,3.758,116,1.461,117,2.682,118,2.682]],["title/controllers/EventController.html",[119,1.602,120,1.809]],["body/controllers/EventController.html",[12,0.041,17,0.208,18,0.175,19,0.175,22,0.565,23,0.4,31,0.845,32,0.208,33,0.051,34,0.012,35,0.019,36,0.012,38,2.064,41,0.208,42,0.961,45,0.969,46,0.748,48,1.456,49,1.07,50,0.572,51,1.456,53,1.456,58,0.682,60,1.341,62,2.126,66,2.121,68,2.005,69,1.617,91,1.187,96,2.121,97,0.614,107,2.121,119,0.947,120,1.675,121,1.428,122,1.428,123,1.223,124,2.36,125,1.915,126,2.236,127,1.915,128,2.36,129,1.428,130,1.428,131,1.74,132,2.126,133,1.223,134,2.236,135,1.74,136,2.236,137,1.428,138,2.236,139,1.74,140,1.223,141,2.126,142,1.74,143,1.428,144,2.126,145,1.74,146,1.74,147,1.428,148,2.756,149,1.428,150,3.119,151,1.74,152,1.428,153,1.223,154,1.428,155,1.428,156,2.236,157,1.632,158,1.428,159,1.223,160,1.223,161,1.223,162,1.223,163,2.336,164,1.74,165,1.428,166,1.74,167,1.223,168,1.74,169,1.07,170,1.74,171,1.428,172,1.74,173,1.74,174,1.74,175,1.74,176,1.428,177,2.236,178,2.236,179,2.724,180,1.74,181,1.74,182,1.428,183,1.74,184,1.74,185,1.74,186,2.724,187,1.74,188,1.74,189,1.74,190,1.74,191,1.74,192,1.74]],["title/modules/EventModule.html",[0,1.282,11,1.602]],["body/modules/EventModule.html",[0,2.113,2,1.62,3,1.62,4,2.05,5,2.05,6,1.62,7,2.982,8,2.05,11,2.979,12,0.04,14,2.677,15,2.05,16,2.05,17,0.398,18,0.336,19,0.336,21,2.343,22,0.636,23,0.766,26,2.343,27,1.62,31,2.116,32,0.398,33,0.098,34,0.023,35,0.03,36,0.023,120,2.982,157,2.659,158,2.736,193,2.736,194,2.736,195,3.333,196,3.333,197,1.815,198,2.736,199,3.333]],["title/classes/EventRepository.html",[33,0.087,197,1.602]],["body/classes/EventRepository.html",[12,0.041,17,0.201,18,0.17,19,0.17,22,0.538,23,0.386,32,0.201,33,0.05,34,0.018,35,0.018,36,0.011,41,0.201,42,0.936,45,0.963,46,0.676,48,1.316,49,1.061,50,0.517,51,1.316,53,1.316,56,2.038,58,1.461,60,1.159,62,1.812,63,0.593,66,2.038,67,2.03,68,1.812,91,2.038,93,1.63,96,1.967,97,1.159,107,1.879,116,0.915,123,1.864,124,2.308,125,1.864,127,1.864,128,2.308,132,2.273,133,1.864,140,1.864,141,1.972,144,1.812,153,1.182,159,1.182,160,1.182,161,1.182,162,1.182,167,1.182,197,1.444,200,1.38,201,2.308,202,3.593,203,1.681,204,1.681,205,1.681,206,1.681,207,1.681,208,1.681,209,1.38,210,1.681,211,1.864,212,1.38,213,1.289,214,1.681,215,1.681,216,1.681,217,3.173,218,1.681,219,2.019,220,2.177,221,2.652,222,2.652,223,2.652,224,2.652,225,1.681,226,1.681,227,1.681,228,1.38,229,3.331,230,1.681,231,1.681,232,1.38,233,1.681,234,1.38,235,1.38,236,1.681,237,1.38,238,1.182,239,1.681]],["title/injectables/EventService.html",[37,0.841,157,1.43]],["body/injectables/EventService.html",[12,0.041,17,0.228,18,0.193,19,0.193,22,0.565,23,0.44,27,0.931,32,0.228,33,0.056,34,0.013,35,0.02,36,0.013,37,0.839,39,0.931,41,0.228,42,1.036,45,0.988,46,0.825,48,1.606,49,1.105,50,0.631,51,1.606,53,1.522,56,0.835,58,0.751,60,1.412,62,2.301,66,2.129,68,1.944,91,1.743,96,2.064,107,2.183,124,2.508,125,2.063,126,2.409,127,2.063,128,2.508,129,1.572,132,2.374,133,2.063,136,2.409,137,2.409,140,2.063,141,2.096,143,1.572,144,2.211,157,1.426,159,1.346,160,1.346,161,1.346,162,1.346,167,1.346,169,1.178,197,2.477,198,1.572,211,1.346,219,1.178,234,1.572,235,1.572,240,1.572,241,2.409,242,1.915,243,1.915,244,1.915,245,1.915,246,1.915,247,1.915,248,1.915,249,1.572,250,1.915,251,1.915,252,1.915,253,1.915,254,1.915,255,1.915]],["title/injectables/EventUpperCasePipe.html",[37,0.841,163,1.809]],["body/injectables/EventUpperCasePipe.html",[12,0.041,17,0.398,18,0.336,19,0.336,22,0.398,23,0.766,32,0.398,33,0.098,34,0.023,35,0.03,36,0.023,37,1.245,39,1.62,41,0.398,42,1.537,43,3.061,44,3.574,45,0.992,46,0.604,48,1.176,49,0.682,50,0.463,51,1.176,52,2.343,53,1.176,54,3.061,55,2.343,56,1.897,60,1.176,163,2.677,256,3.574,257,2.343,258,2.736,259,4.354,260,3.333,261,3.333,262,2.736,263,3.333,264,2.736,265,3.333,266,3.333]],["title/classes/FilterEventDto.html",[33,0.087,141,1.43]],["body/classes/FilterEventDto.html",[12,0.04,17,0.457,18,0.386,19,0.386,22,0.457,32,0.457,33,0.14,34,0.026,35,0.032,36,0.026,41,0.457,45,0.863,46,0.694,50,0.532,63,1.352,65,2.312,69,1.501,72,3.344,77,2.085,87,3.344,141,2.312,229,4.248,267,3.905,268,3.144,269,3.83,270,3.83]],["title/classes/UpdateEventDto.html",[33,0.087,144,1.43]],["body/classes/UpdateEventDto.html",[12,0.04,17,0.383,18,0.324,19,0.324,22,0.383,32,0.383,33,0.125,34,0.022,35,0.029,36,0.022,41,0.383,45,1.017,46,0.919,49,0.975,50,0.703,63,1.134,65,2.065,66,2.075,67,2.593,68,2.314,69,1.986,76,3.705,77,1.749,87,3.705,144,2.065,271,2.637,272,5.068,273,3.212,274,3.212,275,3.212,276,3.212]],["title/classes/Venue.html",[33,0.087,97,1.038]],["body/classes/Venue.html",[12,0.041,17,0.302,18,0.255,19,0.255,22,0.43,32,0.302,33,0.075,34,0.017,35,0.025,36,0.017,41,0.302,45,0.96,46,0.939,49,0.86,50,0.735,63,0.893,65,1.752,66,1.571,69,2.03,80,2.953,81,2.953,82,2.953,90,1.555,91,1.996,93,2.217,94,3.449,95,3.449,96,1.831,97,1.272,98,3.449,100,4.347,107,1.571,108,3.449,112,2.076,114,2.96,116,1.377,123,3.219,277,2.076,278,2.529,279,2.529,280,2.529,281,3.605,282,4.58,283,2.529,284,2.529,285,2.529,286,2.529,287,2.529,288,2.529,289,3.605,290,2.529,291,2.529,292,2.529]],["title/controllers/VenueController.html",[119,1.602,293,1.809]],["body/controllers/VenueController.html",[12,0.04,17,0.265,18,0.224,19,0.224,22,0.548,23,0.51,31,1.079,32,0.265,33,0.065,34,0.015,35,0.022,36,0.015,41,0.265,42,1.157,45,0.707,46,0.781,48,1.376,49,1.068,50,0.541,51,1.376,53,1.52,58,0.87,60,1.52,69,1.688,78,2.338,96,2.226,97,1.52,107,2.096,119,1.208,122,1.822,130,1.822,132,2.483,134,2.692,138,2.692,147,1.822,148,2.692,149,1.822,150,3.201,152,1.822,154,1.822,155,1.822,156,2.692,165,1.822,169,1.365,171,1.822,176,1.822,177,1.822,178,1.822,182,1.822,293,2.016,294,1.822,295,1.822,296,3.201,297,2.692,298,3.536,299,2.692,300,2.219,301,2.219,302,1.822,303,2.219,304,2.219,305,1.822,306,2.219,307,1.895,308,1.822,309,1.56,310,1.56,311,2.016,312,2.219,313,2.219,314,2.219,315,2.219,316,2.219,317,2.219,318,2.219,319,2.219,320,2.219,321,2.219,322,2.219,323,2.219,324,2.219,325,2.219,326,2.219,327,2.219]],["title/modules/VenueModule.html",[0,1.282,13,1.602]],["body/modules/VenueModule.html",[0,2.122,2,1.634,3,1.634,4,2.067,5,2.067,6,1.634,7,2.994,8,2.067,12,0.04,13,2.986,14,2.692,15,2.067,16,2.067,17,0.401,18,0.339,19,0.339,21,2.363,22,0.638,23,0.772,26,2.363,27,1.634,31,2.128,32,0.401,33,0.099,34,0.023,35,0.03,36,0.023,213,1.634,293,2.994,307,2.665,308,2.759,328,2.759,329,2.759,330,3.361,331,3.361,332,2.759,333,3.361]],["title/classes/VenueRepository.html",[33,0.087,213,1.43]],["body/classes/VenueRepository.html",[12,0.041,17,0.272,18,0.23,19,0.23,22,0.52,23,0.523,32,0.272,33,0.067,34,0.015,35,0.023,36,0.015,41,0.272,42,1.179,45,0.88,46,0.718,48,1.179,49,1.075,50,0.464,51,1.179,53,1.397,56,1.9,58,1.551,60,1.397,63,0.803,68,1.624,78,2.119,80,2.349,81,2.349,82,2.349,90,1.4,93,2.054,97,1.539,116,1.24,132,2.359,153,1.6,201,2.782,202,3.691,209,1.869,213,1.624,217,2.782,219,2.054,220,1.869,228,1.869,232,1.869,295,2.743,296,3.249,298,3.58,309,1.6,310,1.6,334,1.869,335,3.341,336,2.276,337,2.276,338,2.276,339,3.341,340,2.276,341,2.276,342,3.341,343,2.276,344,2.276,345,2.276,346,3.341,347,2.276,348,2.276,349,2.276,350,2.276,351,2.276,352,2.276,353,2.276,354,2.276,355,2.276,356,2.276,357,2.276,358,2.276]],["title/injectables/VenueService.html",[37,0.841,307,1.43]],["body/injectables/VenueService.html",[12,0.041,17,0.271,18,0.229,19,0.229,22,0.553,23,0.522,27,1.103,32,0.271,33,0.067,34,0.023,35,0.023,36,0.015,37,0.953,39,1.103,41,0.271,42,1.177,45,0.716,46,0.841,48,1.537,49,1.053,50,0.604,51,1.537,53,1.537,56,1.453,58,1.307,60,1.395,78,2.254,96,2.022,97,1.637,107,2.113,132,2.499,169,1.396,202,3.409,211,1.596,212,1.863,213,2.357,217,2.344,219,2.05,237,1.863,238,1.596,241,2.737,249,1.863,297,2.737,299,2.737,302,2.737,305,2.737,307,1.62,309,1.596,310,1.596,332,1.863,359,1.863,360,3.334,361,4.355,362,2.27,363,2.27,364,3.334,365,2.27,366,2.27,367,2.27,368,2.27,369,2.27,370,2.27,371,2.27,372,2.27,373,2.27,374,2.27,375,2.27,376,2.27,377,2.27,378,2.27]],["title/injectables/VenueUpperCasePipe.html",[37,0.841,311,1.809]],["body/injectables/VenueUpperCasePipe.html",[12,0.041,17,0.396,18,0.335,19,0.335,22,0.396,23,0.763,32,0.396,33,0.098,34,0.023,35,0.03,36,0.023,37,1.242,39,1.613,41,0.396,42,1.533,43,3.052,45,1.01,46,0.602,48,1.172,49,0.889,50,0.461,51,1.172,53,1.172,54,3.052,55,2.333,56,1.892,60,1.172,257,2.333,258,2.725,262,2.725,264,2.725,311,2.67,379,3.565,380,4.342,381,4.342,382,3.319,383,3.319,384,3.319,385,3.319,386,3.319]],["title/coverage.html",[387,2.816]],["body/coverage.html",[6,1.33,12,0.04,19,0.276,28,1.925,33,0.159,34,0.019,35,0.026,36,0.019,37,1.426,38,1.683,40,2.248,50,0.38,58,1.073,62,1.33,64,2.248,78,1.33,79,2.248,91,1.193,92,2.248,97,0.966,119,2.076,120,1.683,121,2.248,141,1.33,144,1.33,157,1.33,163,1.683,197,1.491,200,2.248,213,1.33,238,4.116,240,2.248,256,2.248,257,2.68,267,2.248,268,2.248,271,2.248,277,2.248,293,1.683,294,2.248,307,1.33,311,1.683,334,2.248,359,2.248,379,2.248,387,1.925,388,2.738,389,2.738,390,2.738,391,3.13,392,3.812,393,2.248,394,4.386,395,4.987,396,4.743,397,3.812,398,3.812,399,2.248,400,2.738,401,2.738,402,2.738,403,2.738,404,2.738]],["title/dependencies.html",[3,1.718,405,2.461]],["body/dependencies.html",[3,1.683,12,0.041,23,0.796,27,1.683,33,0.132,34,0.024,35,0.03,36,0.024,77,1.886,116,1.886,406,4.939,407,3.464,408,3.464,409,4.464,410,3.464,411,3.464,412,3.464,413,3.464,414,3.464,415,3.464,416,3.464,417,3.464,418,3.464,419,3.464,420,3.464,421,3.464,422,3.464,423,3.464,424,3.464,425,3.464,426,3.464,427,3.464,428,3.464,429,3.464,430,3.464,431,3.464,432,3.464,433,3.464,434,3.464,435,3.464,436,3.464,437,3.464]],["title/miscellaneous/functions.html",[438,1.513,439,2.903]],["body/miscellaneous/functions.html",[6,2.683,12,0.035,34,0.03,35,0.035,36,0.03,41,0.531,399,3.653,438,2.736,439,3.653,440,4.45]],["title/index.html",[41,0.294,441,2.461,442,2.461]],["body/index.html",[12,0.04,18,0.302,34,0.02,35,0.028,36,0.02,67,1.631,201,2.105,387,2.105,443,2.995,444,2.995,445,4.055,446,2.995,447,2.995,448,2.995,449,2.995,450,2.995,451,2.995,452,2.995,453,2.995,454,2.995,455,4.597,456,2.995,457,2.995,458,2.995,459,5.427,460,2.995,461,2.995,462,2.995,463,5.307,464,2.995,465,2.995,466,4.055,467,2.995,468,2.995,469,2.995,470,2.995,471,4.055,472,4.055,473,2.995,474,2.995,475,2.995,476,4.055,477,4.055,478,2.995,479,2.995,480,2.995,481,2.995,482,2.995,483,2.459,484,2.995,485,2.995,486,2.995,487,2.995,488,2.995,489,2.995,490,2.995,491,2.995,492,2.995,493,2.995,494,2.995,495,2.995,496,2.995,497,2.995,498,2.995,499,2.995,500,2.995,501,2.995]],["title/modules.html",[2,1.947]],["body/modules.html",[1,2.619,2,2.07,11,2.32,12,0.035,13,2.32,34,0.029,35,0.035,36,0.029,483,4.45,502,5.421,503,5.421,504,5.421]],["title/overview.html",[505,3.288]],["body/overview.html",[0,1.557,1,3.427,2,1.736,3,1.736,4,2.197,5,2.197,6,1.736,7,2.197,8,2.197,9,2.933,10,2.933,11,2.968,12,0.038,13,2.968,14,2.8,15,2.197,16,2.197,31,1.736,34,0.024,35,0.031,36,0.024,39,1.736,63,1.261,157,2.435,193,2.933,194,2.933,307,2.435,328,2.933,329,2.933,505,2.933,506,3.572,507,3.572,508,3.572,509,3.572]],["title/miscellaneous/variables.html",[438,1.513,510,2.903]],["body/miscellaneous/variables.html",[12,0.039,28,3.295,34,0.025,35,0.032,36,0.025,41,0.446,50,0.65,52,3.295,90,2.882,391,3.07,393,3.848,438,2.3,510,3.07,511,4.687,512,3.74,513,3.74,514,3.74,515,3.74,516,3.74,517,3.74,518,3.74,519,3.74,520,3.74,521,3.74,522,3.74,523,3.74,524,3.74,525,3.74,526,3.74,527,3.74,528,3.74,529,3.74,530,3.74,531,3.74]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"injectables/ConvertDatePipe.html":{},"classes/CreateEventDto.html":{},"classes/CreateVenueDto.html":{},"classes/Event.html":{},"controllers/EventController.html":{},"modules/EventModule.html":{},"classes/EventRepository.html":{},"injectables/EventService.html":{},"injectables/EventUpperCasePipe.html":{},"classes/FilterEventDto.html":{},"classes/UpdateEventDto.html":{},"classes/Venue.html":{},"controllers/VenueController.html":{},"modules/VenueModule.html":{},"classes/VenueRepository.html":{},"injectables/VenueService.html":{},"injectables/VenueUpperCasePipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":238,"title":{},"body":{"classes/EventRepository.html":{},"injectables/VenueService.html":{},"coverage.html":{}}}],["0.1.13",{"_index":432,"title":{},"body":{"dependencies.html":{}}}],["0.11.0",{"_index":418,"title":{},"body":{"dependencies.html":{}}}],["0.2.20",{"_index":437,"title":{},"body":{"dependencies.html":{}}}],["0.2.3",{"_index":417,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":394,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":396,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":402,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":395,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":397,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":398,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":401,"title":{},"body":{"coverage.html":{}}}],["1.7.4",{"_index":420,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":507,"title":{},"body":{"overview.html":{}}}],["2.10.1",{"_index":415,"title":{},"body":{"dependencies.html":{}}}],["23505",{"_index":356,"title":{},"body":{"classes/VenueRepository.html":{}}}],["3",{"_index":506,"title":{},"body":{"overview.html":{}}}],["3.0.0",{"_index":434,"title":{},"body":{"dependencies.html":{}}}],["3.1.0",{"_index":411,"title":{},"body":{"dependencies.html":{}}}],["3.2.4",{"_index":422,"title":{},"body":{"dependencies.html":{}}}],["3.21.2",{"_index":427,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":508,"title":{},"body":{"overview.html":{}}}],["5.0.0",{"_index":425,"title":{},"body":{"dependencies.html":{}}}],["6.2.0",{"_index":412,"title":{},"body":{"dependencies.html":{}}}],["6.5.3",{"_index":436,"title":{},"body":{"dependencies.html":{}}}],["6.7.2",{"_index":406,"title":{},"body":{"dependencies.html":{}}}],["7.14.0",{"_index":429,"title":{},"body":{"dependencies.html":{}}}],["750",{"_index":105,"title":{},"body":{"classes/Event.html":{}}}],["8",{"_index":509,"title":{},"body":{"overview.html":{}}}],["__dirname",{"_index":526,"title":{},"body":{"miscellaneous/variables.html":{}}}],["already",{"_index":358,"title":{},"body":{"classes/VenueRepository.html":{}}}],["amazing",{"_index":484,"title":{},"body":{"index.html":{}}}],["angular",{"_index":454,"title":{},"body":{"index.html":{}}}],["app",{"_index":461,"title":{},"body":{"index.html":{}}}],["applications",{"_index":451,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["asc",{"_index":228,"title":{},"body":{"classes/EventRepository.html":{},"classes/VenueRepository.html":{}}}],["async",{"_index":202,"title":{},"body":{"classes/EventRepository.html":{},"classes/VenueRepository.html":{},"injectables/VenueService.html":{}}}],["author",{"_index":494,"title":{},"body":{"index.html":{}}}],["await",{"_index":217,"title":{},"body":{"classes/EventRepository.html":{},"classes/VenueRepository.html":{},"injectables/VenueService.html":{}}}],["backers",{"_index":485,"title":{},"body":{"index.html":{}}}],["baseentity",{"_index":94,"title":{},"body":{"classes/Event.html":{},"classes/Venue.html":{}}}],["body",{"_index":148,"title":{},"body":{"controllers/EventController.html":{},"controllers/VenueController.html":{}}}],["body('date",{"_index":179,"title":{},"body":{"controllers/EventController.html":{}}}],["body('name",{"_index":178,"title":{},"body":{"controllers/EventController.html":{},"controllers/VenueController.html":{}}}],["body('venuename",{"_index":180,"title":{},"body":{"controllers/EventController.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"modules/EventModule.html":{},"modules/VenueModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":504,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":502,"title":{},"body":{"modules.html":{}}}],["building",{"_index":446,"title":{},"body":{"index.html":{}}}],["cache",{"_index":413,"title":{},"body":{"dependencies.html":{}}}],["capitalizedwords",{"_index":383,"title":{},"body":{"injectables/VenueUpperCasePipe.html":{}}}],["capitalizedwords.join",{"_index":386,"title":{},"body":{"injectables/VenueUpperCasePipe.html":{}}}],["capitalizedwords.push",{"_index":384,"title":{},"body":{"injectables/VenueUpperCasePipe.html":{}}}],["capitalwords",{"_index":261,"title":{},"body":{"injectables/EventUpperCasePipe.html":{}}}],["capitalwords.join",{"_index":266,"title":{},"body":{"injectables/EventUpperCasePipe.html":{}}}],["capitalwords.push",{"_index":263,"title":{},"body":{"injectables/EventUpperCasePipe.html":{}}}],["catch",{"_index":353,"title":{},"body":{"classes/VenueRepository.html":{}}}],["class",{"_index":33,"title":{"classes/CreateEventDto.html":{},"classes/CreateVenueDto.html":{},"classes/Event.html":{},"classes/EventRepository.html":{},"classes/FilterEventDto.html":{},"classes/UpdateEventDto.html":{},"classes/Venue.html":{},"classes/VenueRepository.html":{}},"body":{"modules/AppModule.html":{},"injectables/ConvertDatePipe.html":{},"classes/CreateEventDto.html":{},"classes/CreateVenueDto.html":{},"classes/Event.html":{},"controllers/EventController.html":{},"modules/EventModule.html":{},"classes/EventRepository.html":{},"injectables/EventService.html":{},"injectables/EventUpperCasePipe.html":{},"classes/FilterEventDto.html":{},"classes/UpdateEventDto.html":{},"classes/Venue.html":{},"controllers/VenueController.html":{},"modules/VenueModule.html":{},"classes/VenueRepository.html":{},"injectables/VenueService.html":{},"injectables/VenueUpperCasePipe.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":63,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateVenueDto.html":{},"classes/Event.html":{},"classes/EventRepository.html":{},"classes/FilterEventDto.html":{},"classes/UpdateEventDto.html":{},"classes/Venue.html":{},"classes/VenueRepository.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_eventmodule",{"_index":193,"title":{},"body":{"modules/EventModule.html":{},"overview.html":{}}}],["cluster_eventmodule_providers",{"_index":194,"title":{},"body":{"modules/EventModule.html":{},"overview.html":{}}}],["cluster_venuemodule",{"_index":328,"title":{},"body":{"modules/VenueModule.html":{},"overview.html":{}}}],["cluster_venuemodule_providers",{"_index":329,"title":{},"body":{"modules/VenueModule.html":{},"overview.html":{}}}],["column",{"_index":100,"title":{},"body":{"classes/Event.html":{},"classes/Venue.html":{}}}],["column({type",{"_index":102,"title":{},"body":{"classes/Event.html":{}}}],["column({unique",{"_index":286,"title":{},"body":{"classes/Venue.html":{}}}],["compression",{"_index":419,"title":{},"body":{"dependencies.html":{}}}],["config",{"_index":421,"title":{},"body":{"dependencies.html":{}}}],["config.get('db",{"_index":512,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config/typeorm.config",{"_index":29,"title":{},"body":{"modules/AppModule.html":{}}}],["conflictexception",{"_index":341,"title":{},"body":{"classes/VenueRepository.html":{}}}],["conflictexception(`venue",{"_index":357,"title":{},"body":{"classes/VenueRepository.html":{}}}],["const",{"_index":56,"title":{},"body":{"injectables/ConvertDatePipe.html":{},"classes/EventRepository.html":{},"injectables/EventService.html":{},"injectables/EventUpperCasePipe.html":{},"classes/VenueRepository.html":{},"injectables/VenueService.html":{},"injectables/VenueUpperCasePipe.html":{}}}],["constructor",{"_index":241,"title":{},"body":{"injectables/EventService.html":{},"injectables/VenueService.html":{}}}],["constructor(eventrepository",{"_index":242,"title":{},"body":{"injectables/EventService.html":{}}}],["constructor(private",{"_index":171,"title":{},"body":{"controllers/EventController.html":{},"controllers/VenueController.html":{}}}],["constructor(venuerepository",{"_index":362,"title":{},"body":{"injectables/VenueService.html":{}}}],["contact",{"_index":320,"title":{},"body":{"controllers/VenueController.html":{}}}],["controller",{"_index":119,"title":{"controllers/EventController.html":{},"controllers/VenueController.html":{}},"body":{"controllers/EventController.html":{},"controllers/VenueController.html":{},"coverage.html":{}}}],["controller('events",{"_index":168,"title":{},"body":{"controllers/EventController.html":{}}}],["controller('venues",{"_index":313,"title":{},"body":{"controllers/VenueController.html":{}}}],["controllers",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"controllers/EventController.html":{},"modules/EventModule.html":{},"controllers/VenueController.html":{},"modules/VenueModule.html":{},"overview.html":{}}}],["convertdatepipe",{"_index":38,"title":{"injectables/ConvertDatePipe.html":{}},"body":{"injectables/ConvertDatePipe.html":{},"controllers/EventController.html":{},"coverage.html":{}}}],["coverage",{"_index":387,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["created",{"_index":182,"title":{},"body":{"controllers/EventController.html":{},"controllers/VenueController.html":{}}}],["createdat",{"_index":95,"title":{},"body":{"classes/Event.html":{},"classes/Venue.html":{}}}],["createdatecolumn",{"_index":98,"title":{},"body":{"classes/Event.html":{},"classes/Venue.html":{}}}],["createevent",{"_index":124,"title":{},"body":{"controllers/EventController.html":{},"classes/EventRepository.html":{},"injectables/EventService.html":{}}}],["createevent(createeventdto",{"_index":129,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{}}}],["createevent(undefined",{"_index":203,"title":{},"body":{"classes/EventRepository.html":{}}}],["createeventdto",{"_index":62,"title":{"classes/CreateEventDto.html":{}},"body":{"classes/CreateEventDto.html":{},"controllers/EventController.html":{},"classes/EventRepository.html":{},"injectables/EventService.html":{},"coverage.html":{}}}],["createnewvenue",{"_index":296,"title":{},"body":{"controllers/VenueController.html":{},"classes/VenueRepository.html":{}}}],["createnewvenue(createvenuedto",{"_index":300,"title":{},"body":{"controllers/VenueController.html":{}}}],["createnewvenue(undefined",{"_index":336,"title":{},"body":{"classes/VenueRepository.html":{}}}],["createvenue",{"_index":360,"title":{},"body":{"injectables/VenueService.html":{}}}],["createvenue(createvenuedto",{"_index":364,"title":{},"body":{"injectables/VenueService.html":{}}}],["createvenuedto",{"_index":78,"title":{"classes/CreateVenueDto.html":{}},"body":{"classes/CreateVenueDto.html":{},"controllers/VenueController.html":{},"classes/VenueRepository.html":{},"injectables/VenueService.html":{},"coverage.html":{}}}],["createvenuedto.email",{"_index":323,"title":{},"body":{"controllers/VenueController.html":{}}}],["createvenuedto.phone",{"_index":322,"title":{},"body":{"controllers/VenueController.html":{}}}],["database",{"_index":523,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date",{"_index":66,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/Event.html":{},"controllers/EventController.html":{},"classes/EventRepository.html":{},"injectables/EventService.html":{},"classes/UpdateEventDto.html":{},"classes/Venue.html":{}}}],["date(value",{"_index":59,"title":{},"body":{"injectables/ConvertDatePipe.html":{}}}],["dbconfig",{"_index":393,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["dbconfig.database",{"_index":524,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dbconfig.host",{"_index":516,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dbconfig.logging",{"_index":531,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dbconfig.password",{"_index":522,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dbconfig.port",{"_index":518,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dbconfig.synchronize",{"_index":529,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dbconfig.type",{"_index":514,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dbconfig.username",{"_index":520,"title":{},"body":{"miscellaneous/variables.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/EventModule.html":{},"modules/VenueModule.html":{},"overview.html":{}}}],["decorators",{"_index":69,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateVenueDto.html":{},"classes/Event.html":{},"controllers/EventController.html":{},"classes/FilterEventDto.html":{},"classes/UpdateEventDto.html":{},"classes/Venue.html":{},"controllers/VenueController.html":{}}}],["default",{"_index":90,"title":{},"body":{"classes/CreateVenueDto.html":{},"classes/Venue.html":{},"classes/VenueRepository.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":46,"title":{},"body":{"injectables/ConvertDatePipe.html":{},"classes/CreateEventDto.html":{},"classes/CreateVenueDto.html":{},"classes/Event.html":{},"controllers/EventController.html":{},"classes/EventRepository.html":{},"injectables/EventService.html":{},"injectables/EventUpperCasePipe.html":{},"classes/FilterEventDto.html":{},"classes/UpdateEventDto.html":{},"classes/Venue.html":{},"controllers/VenueController.html":{},"classes/VenueRepository.html":{},"injectables/VenueService.html":{},"injectables/VenueUpperCasePipe.html":{}}}],["delete",{"_index":152,"title":{},"body":{"controllers/EventController.html":{},"controllers/VenueController.html":{}}}],["delete('/:id",{"_index":134,"title":{},"body":{"controllers/EventController.html":{},"controllers/VenueController.html":{}}}],["deleted",{"_index":191,"title":{},"body":{"controllers/EventController.html":{}}}],["deleteevent",{"_index":125,"title":{},"body":{"controllers/EventController.html":{},"classes/EventRepository.html":{},"injectables/EventService.html":{}}}],["deleteevent(@param('id",{"_index":190,"title":{},"body":{"controllers/EventController.html":{}}}],["deleteevent(id",{"_index":133,"title":{},"body":{"controllers/EventController.html":{},"classes/EventRepository.html":{},"injectables/EventService.html":{}}}],["deletevenue",{"_index":297,"title":{},"body":{"controllers/VenueController.html":{},"injectables/VenueService.html":{}}}],["deletevenue(@param('id",{"_index":325,"title":{},"body":{"controllers/VenueController.html":{}}}],["deletevenue(id",{"_index":302,"title":{},"body":{"controllers/VenueController.html":{},"injectables/VenueService.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/EventModule.html":{},"modules/VenueModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":67,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/Event.html":{},"classes/EventRepository.html":{},"classes/UpdateEventDto.html":{},"index.html":{}}}],["development",{"_index":462,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":388,"title":{},"body":{"coverage.html":{}}}],["dto/createevent.dto",{"_index":159,"title":{},"body":{"controllers/EventController.html":{},"classes/EventRepository.html":{},"injectables/EventService.html":{}}}],["dto/filter",{"_index":161,"title":{},"body":{"controllers/EventController.html":{},"classes/EventRepository.html":{},"injectables/EventService.html":{}}}],["dto/updatevent.dto",{"_index":167,"title":{},"body":{"controllers/EventController.html":{},"classes/EventRepository.html":{},"injectables/EventService.html":{}}}],["dto/venue.dto",{"_index":309,"title":{},"body":{"controllers/VenueController.html":{},"classes/VenueRepository.html":{},"injectables/VenueService.html":{}}}],["e2e",{"_index":473,"title":{},"body":{"index.html":{}}}],["eager",{"_index":281,"title":{},"body":{"classes/Venue.html":{}}}],["efficient",{"_index":447,"title":{},"body":{"index.html":{}}}],["email",{"_index":80,"title":{},"body":{"classes/CreateVenueDto.html":{},"classes/Venue.html":{},"classes/VenueRepository.html":{}}}],["entities",{"_index":525,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entity",{"_index":114,"title":{},"body":{"classes/Event.html":{},"classes/Venue.html":{}}}],["entity.{js,ts",{"_index":527,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entityrepository",{"_index":209,"title":{},"body":{"classes/EventRepository.html":{},"classes/VenueRepository.html":{}}}],["entityrepository(event",{"_index":215,"title":{},"body":{"classes/EventRepository.html":{}}}],["entityrepository(venue",{"_index":343,"title":{},"body":{"classes/VenueRepository.html":{}}}],["error",{"_index":354,"title":{},"body":{"classes/VenueRepository.html":{}}}],["error.code",{"_index":355,"title":{},"body":{"classes/VenueRepository.html":{}}}],["event",{"_index":91,"title":{"classes/Event.html":{}},"body":{"classes/Event.html":{},"controllers/EventController.html":{},"classes/EventRepository.html":{},"injectables/EventService.html":{},"classes/Venue.html":{},"coverage.html":{}}}],["event.controller",{"_index":196,"title":{},"body":{"modules/EventModule.html":{}}}],["event.date",{"_index":223,"title":{},"body":{"classes/EventRepository.html":{}}}],["event.description",{"_index":222,"title":{},"body":{"classes/EventRepository.html":{}}}],["event.dto",{"_index":162,"title":{},"body":{"controllers/EventController.html":{},"classes/EventRepository.html":{},"injectables/EventService.html":{}}}],["event.dto.ts",{"_index":268,"title":{},"body":{"classes/FilterEventDto.html":{},"coverage.html":{}}}],["event.dto.ts:6",{"_index":270,"title":{},"body":{"classes/FilterEventDto.html":{}}}],["event.entity",{"_index":160,"title":{},"body":{"controllers/EventController.html":{},"classes/EventRepository.html":{},"injectables/EventService.html":{}}}],["event.name",{"_index":221,"title":{},"body":{"classes/EventRepository.html":{}}}],["event.repository",{"_index":198,"title":{},"body":{"modules/EventModule.html":{},"injectables/EventService.html":{}}}],["event.save",{"_index":224,"title":{},"body":{"classes/EventRepository.html":{}}}],["event.service",{"_index":158,"title":{},"body":{"controllers/EventController.html":{},"modules/EventModule.html":{}}}],["event/event.module",{"_index":24,"title":{},"body":{"modules/AppModule.html":{}}}],["eventcontroller",{"_index":120,"title":{"controllers/EventController.html":{}},"body":{"controllers/EventController.html":{},"modules/EventModule.html":{},"coverage.html":{}}}],["eventmodule",{"_index":11,"title":{"modules/EventModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EventModule.html":{},"modules.html":{},"overview.html":{}}}],["eventrepository",{"_index":197,"title":{"classes/EventRepository.html":{}},"body":{"modules/EventModule.html":{},"classes/EventRepository.html":{},"injectables/EventService.html":{},"coverage.html":{}}}],["events",{"_index":123,"title":{},"body":{"controllers/EventController.html":{},"classes/EventRepository.html":{},"classes/Venue.html":{}}}],["events.venue",{"_index":292,"title":{},"body":{"classes/Venue.html":{}}}],["eventservice",{"_index":157,"title":{"injectables/EventService.html":{}},"body":{"controllers/EventController.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"coverage.html":{},"overview.html":{}}}],["eventuppercasepipe",{"_index":163,"title":{"injectables/EventUpperCasePipe.html":{}},"body":{"controllers/EventController.html":{},"injectables/EventUpperCasePipe.html":{},"coverage.html":{}}}],["exist",{"_index":220,"title":{},"body":{"classes/EventRepository.html":{},"classes/VenueRepository.html":{}}}],["export",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"injectables/ConvertDatePipe.html":{},"classes/CreateEventDto.html":{},"classes/CreateVenueDto.html":{},"classes/Event.html":{},"controllers/EventController.html":{},"modules/EventModule.html":{},"classes/EventRepository.html":{},"injectables/EventService.html":{},"injectables/EventUpperCasePipe.html":{},"classes/FilterEventDto.html":{},"classes/UpdateEventDto.html":{},"classes/Venue.html":{},"controllers/VenueController.html":{},"modules/VenueModule.html":{},"classes/VenueRepository.html":{},"injectables/VenueService.html":{},"injectables/VenueUpperCasePipe.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/EventModule.html":{},"modules/VenueModule.html":{},"overview.html":{}}}],["express",{"_index":409,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":93,"title":{},"body":{"classes/Event.html":{},"classes/EventRepository.html":{},"classes/Venue.html":{},"classes/VenueRepository.html":{}}}],["file",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"injectables/ConvertDatePipe.html":{},"classes/CreateEventDto.html":{},"classes/CreateVenueDto.html":{},"classes/Event.html":{},"controllers/EventController.html":{},"modules/EventModule.html":{},"classes/EventRepository.html":{},"injectables/EventService.html":{},"injectables/EventUpperCasePipe.html":{},"classes/FilterEventDto.html":{},"classes/UpdateEventDto.html":{},"classes/Venue.html":{},"controllers/VenueController.html":{},"modules/VenueModule.html":{},"classes/VenueRepository.html":{},"injectables/VenueService.html":{},"injectables/VenueUpperCasePipe.html":{},"coverage.html":{}}}],["filtereventdto",{"_index":141,"title":{"classes/FilterEventDto.html":{}},"body":{"controllers/EventController.html":{},"classes/EventRepository.html":{},"injectables/EventService.html":{},"classes/FilterEventDto.html":{},"coverage.html":{}}}],["filtereventdto.search",{"_index":230,"title":{},"body":{"classes/EventRepository.html":{}}}],["find",{"_index":378,"title":{},"body":{"injectables/VenueService.html":{}}}],["found",{"_index":374,"title":{},"body":{"injectables/VenueService.html":{}}}],["framework",{"_index":445,"title":{},"body":{"index.html":{}}}],["function",{"_index":400,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":439,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('/:id",{"_index":138,"title":{},"body":{"controllers/EventController.html":{},"controllers/VenueController.html":{}}}],["getallvenues",{"_index":298,"title":{},"body":{"controllers/VenueController.html":{},"classes/VenueRepository.html":{}}}],["getallvenus",{"_index":361,"title":{},"body":{"injectables/VenueService.html":{}}}],["getcustomrepository",{"_index":210,"title":{},"body":{"classes/EventRepository.html":{}}}],["getcustomrepository(venuerepository",{"_index":216,"title":{},"body":{"classes/EventRepository.html":{}}}],["geteventbyid",{"_index":126,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{}}}],["geteventbyid(@param('id",{"_index":174,"title":{},"body":{"controllers/EventController.html":{}}}],["geteventbyid(id",{"_index":137,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{}}}],["getevents",{"_index":127,"title":{},"body":{"controllers/EventController.html":{},"classes/EventRepository.html":{},"injectables/EventService.html":{}}}],["getevents(@query",{"_index":172,"title":{},"body":{"controllers/EventController.html":{}}}],["getevents(filtereventdto",{"_index":140,"title":{},"body":{"controllers/EventController.html":{},"classes/EventRepository.html":{},"injectables/EventService.html":{}}}],["getting",{"_index":441,"title":{"index.html":{}},"body":{}}],["getvenuebyid",{"_index":299,"title":{},"body":{"controllers/VenueController.html":{},"injectables/VenueService.html":{}}}],["getvenuebyid(@param('id",{"_index":316,"title":{},"body":{"controllers/VenueController.html":{}}}],["getvenuebyid(id",{"_index":305,"title":{},"body":{"controllers/VenueController.html":{},"injectables/VenueService.html":{}}}],["getvenuebyname",{"_index":335,"title":{},"body":{"classes/VenueRepository.html":{}}}],["getvenuebyname(venuename",{"_index":339,"title":{},"body":{"classes/VenueRepository.html":{}}}],["grow",{"_index":480,"title":{},"body":{"index.html":{}}}],["heavily",{"_index":452,"title":{},"body":{"index.html":{}}}],["helmet",{"_index":426,"title":{},"body":{"dependencies.html":{}}}],["here",{"_index":491,"title":{},"body":{"index.html":{}}}],["host",{"_index":515,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://nestjs.com",{"_index":498,"title":{},"body":{"index.html":{}}}],["id",{"_index":96,"title":{},"body":{"classes/Event.html":{},"controllers/EventController.html":{},"classes/EventRepository.html":{},"injectables/EventService.html":{},"classes/Venue.html":{},"controllers/VenueController.html":{},"injectables/VenueService.html":{}}}],["identifier",{"_index":389,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":55,"title":{},"body":{"injectables/ConvertDatePipe.html":{},"injectables/EventUpperCasePipe.html":{},"injectables/VenueUpperCasePipe.html":{}}}],["import",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"injectables/ConvertDatePipe.html":{},"classes/CreateEventDto.html":{},"classes/CreateVenueDto.html":{},"classes/Event.html":{},"controllers/EventController.html":{},"modules/EventModule.html":{},"classes/EventRepository.html":{},"injectables/EventService.html":{},"injectables/EventUpperCasePipe.html":{},"classes/FilterEventDto.html":{},"classes/UpdateEventDto.html":{},"classes/Venue.html":{},"controllers/VenueController.html":{},"modules/VenueModule.html":{},"classes/VenueRepository.html":{},"injectables/VenueService.html":{},"injectables/VenueUpperCasePipe.html":{}}}],["imports",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"modules/EventModule.html":{},"modules/VenueModule.html":{}}}],["index",{"_index":41,"title":{"index.html":{}},"body":{"injectables/ConvertDatePipe.html":{},"classes/CreateEventDto.html":{},"classes/CreateVenueDto.html":{},"classes/Event.html":{},"controllers/EventController.html":{},"classes/EventRepository.html":{},"injectables/EventService.html":{},"injectables/EventUpperCasePipe.html":{},"classes/FilterEventDto.html":{},"classes/UpdateEventDto.html":{},"classes/Venue.html":{},"controllers/VenueController.html":{},"classes/VenueRepository.html":{},"injectables/VenueService.html":{},"injectables/VenueUpperCasePipe.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"injectables/ConvertDatePipe.html":{},"classes/CreateEventDto.html":{},"classes/CreateVenueDto.html":{},"classes/Event.html":{},"controllers/EventController.html":{},"modules/EventModule.html":{},"classes/EventRepository.html":{},"injectables/EventService.html":{},"injectables/EventUpperCasePipe.html":{},"classes/FilterEventDto.html":{},"classes/UpdateEventDto.html":{},"classes/Venue.html":{},"controllers/VenueController.html":{},"modules/VenueModule.html":{},"classes/VenueRepository.html":{},"injectables/VenueService.html":{},"injectables/VenueUpperCasePipe.html":{}}}],["information",{"_index":321,"title":{},"body":{"controllers/VenueController.html":{}}}],["injectable",{"_index":37,"title":{"injectables/ConvertDatePipe.html":{},"injectables/EventService.html":{},"injectables/EventUpperCasePipe.html":{},"injectables/VenueService.html":{},"injectables/VenueUpperCasePipe.html":{}},"body":{"injectables/ConvertDatePipe.html":{},"injectables/EventService.html":{},"injectables/EventUpperCasePipe.html":{},"injectables/VenueService.html":{},"injectables/VenueUpperCasePipe.html":{},"coverage.html":{}}}],["injectables",{"_index":39,"title":{},"body":{"injectables/ConvertDatePipe.html":{},"injectables/EventService.html":{},"injectables/EventUpperCasePipe.html":{},"injectables/VenueService.html":{},"injectables/VenueUpperCasePipe.html":{},"overview.html":{}}}],["injectrepository",{"_index":249,"title":{},"body":{"injectables/EventService.html":{},"injectables/VenueService.html":{}}}],["injectrepository(eventrepository",{"_index":250,"title":{},"body":{"injectables/EventService.html":{}}}],["injectrepository(venue",{"_index":369,"title":{},"body":{"injectables/VenueService.html":{}}}],["inspired",{"_index":453,"title":{},"body":{"index.html":{}}}],["installation",{"_index":458,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":460,"title":{},"body":{"index.html":{}}}],["internalservererrorexception",{"_index":342,"title":{},"body":{"classes/VenueRepository.html":{}}}],["invalid",{"_index":235,"title":{},"body":{"classes/EventRepository.html":{},"injectables/EventService.html":{}}}],["isemail",{"_index":89,"title":{},"body":{"classes/CreateVenueDto.html":{}}}],["isnotempty",{"_index":72,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateVenueDto.html":{},"classes/FilterEventDto.html":{}}}],["isnotempty()@isstring",{"_index":70,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateVenueDto.html":{}}}],["isoptional",{"_index":87,"title":{},"body":{"classes/CreateVenueDto.html":{},"classes/FilterEventDto.html":{},"classes/UpdateEventDto.html":{}}}],["isoptional()@isemail",{"_index":83,"title":{},"body":{"classes/CreateVenueDto.html":{}}}],["isoptional()@isnotempty",{"_index":269,"title":{},"body":{"classes/FilterEventDto.html":{}}}],["isoptional()@isstring",{"_index":272,"title":{},"body":{"classes/UpdateEventDto.html":{}}}],["isstring",{"_index":76,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateVenueDto.html":{},"classes/UpdateEventDto.html":{}}}],["join",{"_index":487,"title":{},"body":{"index.html":{}}}],["kamil",{"_index":495,"title":{},"body":{"index.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"modules/EventModule.html":{},"modules/VenueModule.html":{},"overview.html":{}}}],["length",{"_index":104,"title":{},"body":{"classes/Event.html":{}}}],["license",{"_index":501,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":477,"title":{},"body":{"index.html":{}}}],["limit",{"_index":424,"title":{},"body":{"dependencies.html":{}}}],["location",{"_index":81,"title":{},"body":{"classes/CreateVenueDto.html":{},"classes/Venue.html":{},"classes/VenueRepository.html":{}}}],["logger",{"_index":156,"title":{},"body":{"controllers/EventController.html":{},"controllers/VenueController.html":{}}}],["logger('eventcontroller",{"_index":170,"title":{},"body":{"controllers/EventController.html":{}}}],["logger('venuecontroller",{"_index":314,"title":{},"body":{"controllers/VenueController.html":{}}}],["logging",{"_index":530,"title":{},"body":{"miscellaneous/variables.html":{}}}],["manager",{"_index":414,"title":{},"body":{"dependencies.html":{}}}],["manytoone",{"_index":115,"title":{},"body":{"classes/Event.html":{}}}],["manytoone(undefined",{"_index":111,"title":{},"body":{"classes/Event.html":{}}}],["matching",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"injectables/ConvertDatePipe.html":{},"classes/CreateEventDto.html":{},"classes/CreateVenueDto.html":{},"classes/Event.html":{},"controllers/EventController.html":{},"modules/EventModule.html":{},"classes/EventRepository.html":{},"injectables/EventService.html":{},"injectables/EventUpperCasePipe.html":{},"classes/FilterEventDto.html":{},"classes/UpdateEventDto.html":{},"classes/Venue.html":{},"controllers/VenueController.html":{},"modules/VenueModule.html":{},"classes/VenueRepository.html":{},"injectables/VenueService.html":{},"injectables/VenueUpperCasePipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":431,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":42,"title":{},"body":{"injectables/ConvertDatePipe.html":{},"controllers/EventController.html":{},"classes/EventRepository.html":{},"injectables/EventService.html":{},"injectables/EventUpperCasePipe.html":{},"controllers/VenueController.html":{},"classes/VenueRepository.html":{},"injectables/VenueService.html":{},"injectables/VenueUpperCasePipe.html":{}}}],["miscellaneous",{"_index":438,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":476,"title":{},"body":{"index.html":{}}}],["mode",{"_index":466,"title":{},"body":{"index.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/EventModule.html":{},"modules/VenueModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EventModule.html":{},"modules/VenueModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/EventModule.html":{},"modules/VenueModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":490,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":496,"title":{},"body":{"index.html":{}}}],["name",{"_index":49,"title":{},"body":{"injectables/ConvertDatePipe.html":{},"classes/CreateEventDto.html":{},"classes/CreateVenueDto.html":{},"classes/Event.html":{},"controllers/EventController.html":{},"classes/EventRepository.html":{},"injectables/EventService.html":{},"injectables/EventUpperCasePipe.html":{},"classes/UpdateEventDto.html":{},"classes/Venue.html":{},"controllers/VenueController.html":{},"classes/VenueRepository.html":{},"injectables/VenueService.html":{},"injectables/VenueUpperCasePipe.html":{}}}],["name.split",{"_index":382,"title":{},"body":{"injectables/VenueUpperCasePipe.html":{}}}],["nest",{"_index":455,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":500,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"injectables/ConvertDatePipe.html":{},"controllers/EventController.html":{},"modules/EventModule.html":{},"classes/EventRepository.html":{},"injectables/EventService.html":{},"injectables/EventUpperCasePipe.html":{},"controllers/VenueController.html":{},"modules/VenueModule.html":{},"classes/VenueRepository.html":{},"injectables/VenueService.html":{},"injectables/VenueUpperCasePipe.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":407,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":408,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":410,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"modules/VenueModule.html":{},"injectables/VenueService.html":{},"dependencies.html":{}}}],["new",{"_index":58,"title":{},"body":{"injectables/ConvertDatePipe.html":{},"controllers/EventController.html":{},"classes/EventRepository.html":{},"injectables/EventService.html":{},"controllers/VenueController.html":{},"classes/VenueRepository.html":{},"injectables/VenueService.html":{},"coverage.html":{}}}],["newdate",{"_index":57,"title":{},"body":{"injectables/ConvertDatePipe.html":{}}}],["newdate.todatestring",{"_index":61,"title":{},"body":{"injectables/ConvertDatePipe.html":{}}}],["newvalue",{"_index":259,"title":{},"body":{"injectables/EventUpperCasePipe.html":{}}}],["newvenue",{"_index":346,"title":{},"body":{"classes/VenueRepository.html":{}}}],["newvenue.email",{"_index":350,"title":{},"body":{"classes/VenueRepository.html":{}}}],["newvenue.location",{"_index":348,"title":{},"body":{"classes/VenueRepository.html":{}}}],["newvenue.name",{"_index":347,"title":{},"body":{"classes/VenueRepository.html":{}}}],["newvenue.phone",{"_index":349,"title":{},"body":{"classes/VenueRepository.html":{}}}],["newvenue.save",{"_index":352,"title":{},"body":{"classes/VenueRepository.html":{}}}],["node.js",{"_index":444,"title":{},"body":{"index.html":{}}}],["notacceptableexception",{"_index":211,"title":{},"body":{"classes/EventRepository.html":{},"injectables/EventService.html":{},"injectables/VenueService.html":{}}}],["notacceptableexception(`event",{"_index":234,"title":{},"body":{"classes/EventRepository.html":{},"injectables/EventService.html":{}}}],["notacceptableexception(`venue",{"_index":372,"title":{},"body":{"injectables/VenueService.html":{}}}],["notfoundexception",{"_index":212,"title":{},"body":{"classes/EventRepository.html":{},"injectables/VenueService.html":{}}}],["notfoundexception(`cannot",{"_index":377,"title":{},"body":{"injectables/VenueService.html":{}}}],["notfoundexception(`this",{"_index":239,"title":{},"body":{"classes/EventRepository.html":{}}}],["npm",{"_index":459,"title":{},"body":{"index.html":{}}}],["number",{"_index":107,"title":{},"body":{"classes/Event.html":{},"controllers/EventController.html":{},"classes/EventRepository.html":{},"injectables/EventService.html":{},"classes/Venue.html":{},"controllers/VenueController.html":{},"injectables/VenueService.html":{}}}],["of:${id",{"_index":373,"title":{},"body":{"injectables/VenueService.html":{}}}],["onetomany",{"_index":289,"title":{},"body":{"classes/Venue.html":{}}}],["onetomany(undefined",{"_index":280,"title":{},"body":{"classes/Venue.html":{}}}],["open",{"_index":478,"title":{},"body":{"index.html":{}}}],["optional",{"_index":51,"title":{},"body":{"injectables/ConvertDatePipe.html":{},"controllers/EventController.html":{},"classes/EventRepository.html":{},"injectables/EventService.html":{},"injectables/EventUpperCasePipe.html":{},"controllers/VenueController.html":{},"classes/VenueRepository.html":{},"injectables/VenueService.html":{},"injectables/VenueUpperCasePipe.html":{}}}],["out",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"modules/EventModule.html":{},"modules/VenueModule.html":{},"overview.html":{}}}],["overview",{"_index":505,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":405,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":149,"title":{},"body":{"controllers/EventController.html":{},"controllers/VenueController.html":{}}}],["param('id",{"_index":185,"title":{},"body":{"controllers/EventController.html":{}}}],["parameters",{"_index":48,"title":{},"body":{"injectables/ConvertDatePipe.html":{},"controllers/EventController.html":{},"classes/EventRepository.html":{},"injectables/EventService.html":{},"injectables/EventUpperCasePipe.html":{},"controllers/VenueController.html":{},"classes/VenueRepository.html":{},"injectables/VenueService.html":{},"injectables/VenueUpperCasePipe.html":{}}}],["parseintpipe",{"_index":150,"title":{},"body":{"controllers/EventController.html":{},"controllers/VenueController.html":{}}}],["password",{"_index":521,"title":{},"body":{"miscellaneous/variables.html":{}}}],["patch",{"_index":151,"title":{},"body":{"controllers/EventController.html":{}}}],["patch('/:id/update",{"_index":184,"title":{},"body":{"controllers/EventController.html":{}}}],["patch('/:id/update')@usepipes(validationpipe",{"_index":145,"title":{},"body":{"controllers/EventController.html":{}}}],["pg",{"_index":428,"title":{},"body":{"dependencies.html":{}}}],["phone",{"_index":82,"title":{},"body":{"classes/CreateVenueDto.html":{},"classes/Venue.html":{},"classes/VenueRepository.html":{}}}],["pipes/convertdate.pipe",{"_index":166,"title":{},"body":{"controllers/EventController.html":{}}}],["pipes/event",{"_index":164,"title":{},"body":{"controllers/EventController.html":{}}}],["pipes/venue",{"_index":312,"title":{},"body":{"controllers/VenueController.html":{}}}],["pipetransform",{"_index":54,"title":{},"body":{"injectables/ConvertDatePipe.html":{},"injectables/EventUpperCasePipe.html":{},"injectables/VenueUpperCasePipe.html":{}}}],["please",{"_index":488,"title":{},"body":{"index.html":{}}}],["port",{"_index":517,"title":{},"body":{"miscellaneous/variables.html":{}}}],["post",{"_index":147,"title":{},"body":{"controllers/EventController.html":{},"controllers/VenueController.html":{}}}],["post('/create",{"_index":176,"title":{},"body":{"controllers/EventController.html":{},"controllers/VenueController.html":{}}}],["post('/create')@usepipes(validationpipe",{"_index":130,"title":{},"body":{"controllers/EventController.html":{},"controllers/VenueController.html":{}}}],["prefix",{"_index":122,"title":{},"body":{"controllers/EventController.html":{},"controllers/VenueController.html":{}}}],["primarygeneratedcolumn",{"_index":108,"title":{},"body":{"classes/Event.html":{},"classes/Venue.html":{}}}],["private",{"_index":169,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{},"controllers/VenueController.html":{},"injectables/VenueService.html":{}}}],["production",{"_index":468,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":443,"title":{},"body":{"index.html":{}}}],["project",{"_index":479,"title":{},"body":{"index.html":{}}}],["promise",{"_index":132,"title":{},"body":{"controllers/EventController.html":{},"classes/EventRepository.html":{},"injectables/EventService.html":{},"controllers/VenueController.html":{},"classes/VenueRepository.html":{},"injectables/VenueService.html":{}}}],["properties",{"_index":65,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateVenueDto.html":{},"classes/Event.html":{},"classes/FilterEventDto.html":{},"classes/UpdateEventDto.html":{},"classes/Venue.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/EventModule.html":{},"modules/VenueModule.html":{},"overview.html":{}}}],["query",{"_index":153,"title":{},"body":{"controllers/EventController.html":{},"classes/EventRepository.html":{},"classes/VenueRepository.html":{}}}],["query.getmany",{"_index":232,"title":{},"body":{"classes/EventRepository.html":{},"classes/VenueRepository.html":{}}}],["query.where('(event.name",{"_index":231,"title":{},"body":{"classes/EventRepository.html":{}}}],["rate",{"_index":423,"title":{},"body":{"dependencies.html":{}}}],["read",{"_index":489,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":430,"title":{},"body":{"dependencies.html":{}}}],["repository",{"_index":201,"title":{},"body":{"classes/EventRepository.html":{},"classes/VenueRepository.html":{},"index.html":{}}}],["reset",{"_index":15,"title":{},"body":{"modules/AppModule.html":{},"modules/EventModule.html":{},"modules/VenueModule.html":{},"overview.html":{}}}],["result",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"injectables/ConvertDatePipe.html":{},"classes/CreateEventDto.html":{},"classes/CreateVenueDto.html":{},"classes/Event.html":{},"controllers/EventController.html":{},"modules/EventModule.html":{},"classes/EventRepository.html":{},"injectables/EventService.html":{},"injectables/EventUpperCasePipe.html":{},"classes/FilterEventDto.html":{},"classes/UpdateEventDto.html":{},"classes/Venue.html":{},"controllers/VenueController.html":{},"modules/VenueModule.html":{},"classes/VenueRepository.html":{},"injectables/VenueService.html":{},"injectables/VenueUpperCasePipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["result.affected",{"_index":237,"title":{},"body":{"classes/EventRepository.html":{},"injectables/VenueService.html":{}}}],["results",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"injectables/ConvertDatePipe.html":{},"classes/CreateEventDto.html":{},"classes/CreateVenueDto.html":{},"classes/Event.html":{},"controllers/EventController.html":{},"modules/EventModule.html":{},"classes/EventRepository.html":{},"injectables/EventService.html":{},"injectables/EventUpperCasePipe.html":{},"classes/FilterEventDto.html":{},"classes/UpdateEventDto.html":{},"classes/Venue.html":{},"controllers/VenueController.html":{},"modules/VenueModule.html":{},"classes/VenueRepository.html":{},"injectables/VenueService.html":{},"injectables/VenueUpperCasePipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":60,"title":{},"body":{"injectables/ConvertDatePipe.html":{},"controllers/EventController.html":{},"classes/EventRepository.html":{},"injectables/EventService.html":{},"injectables/EventUpperCasePipe.html":{},"controllers/VenueController.html":{},"classes/VenueRepository.html":{},"injectables/VenueService.html":{},"injectables/VenueUpperCasePipe.html":{}}}],["returns",{"_index":53,"title":{},"body":{"injectables/ConvertDatePipe.html":{},"controllers/EventController.html":{},"classes/EventRepository.html":{},"injectables/EventService.html":{},"injectables/EventUpperCasePipe.html":{},"controllers/VenueController.html":{},"classes/VenueRepository.html":{},"injectables/VenueService.html":{},"injectables/VenueUpperCasePipe.html":{}}}],["rimraf",{"_index":433,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":463,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":435,"title":{},"body":{"dependencies.html":{}}}],["scalable",{"_index":448,"title":{},"body":{"index.html":{}}}],["search",{"_index":229,"title":{},"body":{"classes/EventRepository.html":{},"classes/FilterEventDto.html":{}}}],["server",{"_index":449,"title":{},"body":{"index.html":{}}}],["side",{"_index":450,"title":{},"body":{"index.html":{}}}],["source",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"injectables/ConvertDatePipe.html":{},"classes/CreateEventDto.html":{},"classes/CreateVenueDto.html":{},"classes/Event.html":{},"controllers/EventController.html":{},"modules/EventModule.html":{},"classes/EventRepository.html":{},"injectables/EventService.html":{},"injectables/EventUpperCasePipe.html":{},"classes/FilterEventDto.html":{},"classes/UpdateEventDto.html":{},"classes/Venue.html":{},"controllers/VenueController.html":{},"modules/VenueModule.html":{},"classes/VenueRepository.html":{},"injectables/VenueService.html":{},"injectables/VenueUpperCasePipe.html":{},"index.html":{}}}],["sponsors",{"_index":482,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":440,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../typeorm.config.ts",{"_index":511,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":20,"title":{},"body":{"modules/AppModule.html":{}}}],["src/config/typeorm.config.ts",{"_index":391,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/event/dto/createevent.dto.ts",{"_index":64,"title":{},"body":{"classes/CreateEventDto.html":{},"coverage.html":{}}}],["src/event/dto/createevent.dto.ts:12",{"_index":73,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["src/event/dto/createevent.dto.ts:16",{"_index":75,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["src/event/dto/createevent.dto.ts:5",{"_index":74,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["src/event/dto/createevent.dto.ts:9",{"_index":71,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["src/event/dto/filter",{"_index":267,"title":{},"body":{"classes/FilterEventDto.html":{},"coverage.html":{}}}],["src/event/dto/updatevent.dto.ts",{"_index":271,"title":{},"body":{"classes/UpdateEventDto.html":{},"coverage.html":{}}}],["src/event/dto/updatevent.dto.ts:10",{"_index":273,"title":{},"body":{"classes/UpdateEventDto.html":{}}}],["src/event/dto/updatevent.dto.ts:14",{"_index":274,"title":{},"body":{"classes/UpdateEventDto.html":{}}}],["src/event/dto/updatevent.dto.ts:18",{"_index":276,"title":{},"body":{"classes/UpdateEventDto.html":{}}}],["src/event/dto/updatevent.dto.ts:6",{"_index":275,"title":{},"body":{"classes/UpdateEventDto.html":{}}}],["src/event/event.controller.ts",{"_index":121,"title":{},"body":{"controllers/EventController.html":{},"coverage.html":{}}}],["src/event/event.controller.ts:30",{"_index":142,"title":{},"body":{"controllers/EventController.html":{}}}],["src/event/event.controller.ts:35",{"_index":139,"title":{},"body":{"controllers/EventController.html":{}}}],["src/event/event.controller.ts:41",{"_index":131,"title":{},"body":{"controllers/EventController.html":{}}}],["src/event/event.controller.ts:57",{"_index":146,"title":{},"body":{"controllers/EventController.html":{}}}],["src/event/event.controller.ts:71",{"_index":135,"title":{},"body":{"controllers/EventController.html":{}}}],["src/event/event.entity",{"_index":290,"title":{},"body":{"classes/Venue.html":{}}}],["src/event/event.entity.ts",{"_index":92,"title":{},"body":{"classes/Event.html":{},"coverage.html":{}}}],["src/event/event.entity.ts:14",{"_index":109,"title":{},"body":{"classes/Event.html":{}}}],["src/event/event.entity.ts:16",{"_index":110,"title":{},"body":{"classes/Event.html":{}}}],["src/event/event.entity.ts:22",{"_index":106,"title":{},"body":{"classes/Event.html":{}}}],["src/event/event.entity.ts:25",{"_index":101,"title":{},"body":{"classes/Event.html":{}}}],["src/event/event.entity.ts:28",{"_index":99,"title":{},"body":{"classes/Event.html":{}}}],["src/event/event.entity.ts:34",{"_index":113,"title":{},"body":{"classes/Event.html":{}}}],["src/event/event.module.ts",{"_index":195,"title":{},"body":{"modules/EventModule.html":{}}}],["src/event/event.repository.ts",{"_index":200,"title":{},"body":{"classes/EventRepository.html":{},"coverage.html":{}}}],["src/event/event.repository.ts:11",{"_index":204,"title":{},"body":{"classes/EventRepository.html":{}}}],["src/event/event.repository.ts:40",{"_index":206,"title":{},"body":{"classes/EventRepository.html":{}}}],["src/event/event.repository.ts:53",{"_index":208,"title":{},"body":{"classes/EventRepository.html":{}}}],["src/event/event.repository.ts:73",{"_index":205,"title":{},"body":{"classes/EventRepository.html":{}}}],["src/event/event.service.ts",{"_index":240,"title":{},"body":{"injectables/EventService.html":{},"coverage.html":{}}}],["src/event/event.service.ts:10",{"_index":243,"title":{},"body":{"injectables/EventService.html":{}}}],["src/event/event.service.ts:16",{"_index":244,"title":{},"body":{"injectables/EventService.html":{}}}],["src/event/event.service.ts:30",{"_index":247,"title":{},"body":{"injectables/EventService.html":{}}}],["src/event/event.service.ts:34",{"_index":246,"title":{},"body":{"injectables/EventService.html":{}}}],["src/event/event.service.ts:43",{"_index":248,"title":{},"body":{"injectables/EventService.html":{}}}],["src/event/event.service.ts:52",{"_index":245,"title":{},"body":{"injectables/EventService.html":{}}}],["src/event/pipes/convertdate.pipe.ts",{"_index":40,"title":{},"body":{"injectables/ConvertDatePipe.html":{},"coverage.html":{}}}],["src/event/pipes/convertdate.pipe.ts:5",{"_index":47,"title":{},"body":{"injectables/ConvertDatePipe.html":{}}}],["src/event/pipes/event",{"_index":256,"title":{},"body":{"injectables/EventUpperCasePipe.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":399,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/venue/dto/venue.dto.ts",{"_index":79,"title":{},"body":{"classes/CreateVenueDto.html":{},"coverage.html":{}}}],["src/venue/dto/venue.dto.ts:10",{"_index":85,"title":{},"body":{"classes/CreateVenueDto.html":{}}}],["src/venue/dto/venue.dto.ts:14",{"_index":84,"title":{},"body":{"classes/CreateVenueDto.html":{}}}],["src/venue/dto/venue.dto.ts:17",{"_index":88,"title":{},"body":{"classes/CreateVenueDto.html":{}}}],["src/venue/dto/venue.dto.ts:6",{"_index":86,"title":{},"body":{"classes/CreateVenueDto.html":{}}}],["src/venue/pipes/venue",{"_index":379,"title":{},"body":{"injectables/VenueUpperCasePipe.html":{},"coverage.html":{}}}],["src/venue/venue.controller.ts",{"_index":294,"title":{},"body":{"controllers/VenueController.html":{},"coverage.html":{}}}],["src/venue/venue.controller.ts:25",{"_index":304,"title":{},"body":{"controllers/VenueController.html":{}}}],["src/venue/venue.controller.ts:30",{"_index":306,"title":{},"body":{"controllers/VenueController.html":{}}}],["src/venue/venue.controller.ts:37",{"_index":301,"title":{},"body":{"controllers/VenueController.html":{}}}],["src/venue/venue.controller.ts:49",{"_index":303,"title":{},"body":{"controllers/VenueController.html":{}}}],["src/venue/venue.entity",{"_index":117,"title":{},"body":{"classes/Event.html":{}}}],["src/venue/venue.entity.ts",{"_index":277,"title":{},"body":{"classes/Venue.html":{},"coverage.html":{}}}],["src/venue/venue.entity.ts:14",{"_index":284,"title":{},"body":{"classes/Venue.html":{}}}],["src/venue/venue.entity.ts:18",{"_index":287,"title":{},"body":{"classes/Venue.html":{}}}],["src/venue/venue.entity.ts:20",{"_index":285,"title":{},"body":{"classes/Venue.html":{}}}],["src/venue/venue.entity.ts:22",{"_index":288,"title":{},"body":{"classes/Venue.html":{}}}],["src/venue/venue.entity.ts:25",{"_index":279,"title":{},"body":{"classes/Venue.html":{}}}],["src/venue/venue.entity.ts:28",{"_index":278,"title":{},"body":{"classes/Venue.html":{}}}],["src/venue/venue.entity.ts:37",{"_index":283,"title":{},"body":{"classes/Venue.html":{}}}],["src/venue/venue.module.ts",{"_index":330,"title":{},"body":{"modules/VenueModule.html":{}}}],["src/venue/venue.repository",{"_index":214,"title":{},"body":{"classes/EventRepository.html":{}}}],["src/venue/venue.repository.ts",{"_index":334,"title":{},"body":{"classes/VenueRepository.html":{},"coverage.html":{}}}],["src/venue/venue.repository.ts:11",{"_index":338,"title":{},"body":{"classes/VenueRepository.html":{}}}],["src/venue/venue.repository.ts:19",{"_index":340,"title":{},"body":{"classes/VenueRepository.html":{}}}],["src/venue/venue.repository.ts:27",{"_index":337,"title":{},"body":{"classes/VenueRepository.html":{}}}],["src/venue/venue.service.ts",{"_index":359,"title":{},"body":{"injectables/VenueService.html":{},"coverage.html":{}}}],["src/venue/venue.service.ts:12",{"_index":363,"title":{},"body":{"injectables/VenueService.html":{}}}],["src/venue/venue.service.ts:18",{"_index":367,"title":{},"body":{"injectables/VenueService.html":{}}}],["src/venue/venue.service.ts:22",{"_index":368,"title":{},"body":{"injectables/VenueService.html":{}}}],["src/venue/venue.service.ts:32",{"_index":365,"title":{},"body":{"injectables/VenueService.html":{}}}],["src/venue/venue.service.ts:36",{"_index":366,"title":{},"body":{"injectables/VenueService.html":{}}}],["start",{"_index":464,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":467,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":469,"title":{},"body":{"index.html":{}}}],["started",{"_index":442,"title":{"index.html":{}},"body":{}}],["starter",{"_index":457,"title":{},"body":{"index.html":{}}}],["statements",{"_index":390,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":492,"title":{},"body":{"index.html":{}}}],["string",{"_index":45,"title":{},"body":{"injectables/ConvertDatePipe.html":{},"classes/CreateEventDto.html":{},"classes/CreateVenueDto.html":{},"classes/Event.html":{},"controllers/EventController.html":{},"classes/EventRepository.html":{},"injectables/EventService.html":{},"injectables/EventUpperCasePipe.html":{},"classes/FilterEventDto.html":{},"classes/UpdateEventDto.html":{},"classes/Venue.html":{},"controllers/VenueController.html":{},"classes/VenueRepository.html":{},"injectables/VenueService.html":{},"injectables/VenueUpperCasePipe.html":{}}}],["support",{"_index":483,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":503,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":528,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":404,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":403,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":472,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":475,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":474,"title":{},"body":{"index.html":{}}}],["tests",{"_index":471,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":481,"title":{},"body":{"index.html":{}}}],["this.createquerybuilder('event').orderby('id",{"_index":227,"title":{},"body":{"classes/EventRepository.html":{}}}],["this.createquerybuilder('venue').orderby('id",{"_index":344,"title":{},"body":{"classes/VenueRepository.html":{}}}],["this.delete(id",{"_index":236,"title":{},"body":{"classes/EventRepository.html":{}}}],["this.eventrepository.createevent",{"_index":251,"title":{},"body":{"injectables/EventService.html":{}}}],["this.eventrepository.deleteevent(id",{"_index":255,"title":{},"body":{"injectables/EventService.html":{}}}],["this.eventrepository.findone(id",{"_index":253,"title":{},"body":{"injectables/EventService.html":{}}}],["this.eventrepository.getevents(filtereventdto",{"_index":252,"title":{},"body":{"injectables/EventService.html":{}}}],["this.eventrepository.updateevent(updateeventdto",{"_index":254,"title":{},"body":{"injectables/EventService.html":{}}}],["this.eventservice.createevent(createeventdto",{"_index":183,"title":{},"body":{"controllers/EventController.html":{}}}],["this.eventservice.deleteevent(id",{"_index":192,"title":{},"body":{"controllers/EventController.html":{}}}],["this.eventservice.geteventbyid(id",{"_index":175,"title":{},"body":{"controllers/EventController.html":{}}}],["this.eventservice.getevents(filtereventdto",{"_index":173,"title":{},"body":{"controllers/EventController.html":{}}}],["this.eventservice.updateevent(updateeventdto",{"_index":189,"title":{},"body":{"controllers/EventController.html":{}}}],["this.findone",{"_index":345,"title":{},"body":{"classes/VenueRepository.html":{}}}],["this.findone(id",{"_index":233,"title":{},"body":{"classes/EventRepository.html":{}}}],["this.logger.verbose",{"_index":319,"title":{},"body":{"controllers/VenueController.html":{}}}],["this.logger.verbose(`${name",{"_index":181,"title":{},"body":{"controllers/EventController.html":{}}}],["this.logger.verbose(`deleted",{"_index":326,"title":{},"body":{"controllers/VenueController.html":{}}}],["this.logger.verbose(`event",{"_index":186,"title":{},"body":{"controllers/EventController.html":{}}}],["this.logger.verbose(`fetching",{"_index":317,"title":{},"body":{"controllers/VenueController.html":{}}}],["this.venuerepository.createnewvenue(createvenuedto",{"_index":375,"title":{},"body":{"injectables/VenueService.html":{}}}],["this.venuerepository.delete(id",{"_index":376,"title":{},"body":{"injectables/VenueService.html":{}}}],["this.venuerepository.findone(id",{"_index":371,"title":{},"body":{"injectables/VenueService.html":{}}}],["this.venuerepository.getallvenues",{"_index":370,"title":{},"body":{"injectables/VenueService.html":{}}}],["this.venueservice.createvenue(createvenuedto",{"_index":324,"title":{},"body":{"controllers/VenueController.html":{}}}],["this.venueservice.deletevenue(id",{"_index":327,"title":{},"body":{"controllers/VenueController.html":{}}}],["this.venueservice.getallvenus",{"_index":315,"title":{},"body":{"controllers/VenueController.html":{}}}],["this.venueservice.getvenuebyid(id",{"_index":318,"title":{},"body":{"controllers/VenueController.html":{}}}],["throw",{"_index":219,"title":{},"body":{"classes/EventRepository.html":{},"injectables/EventService.html":{},"classes/VenueRepository.html":{},"injectables/VenueService.html":{}}}],["touch",{"_index":493,"title":{},"body":{"index.html":{}}}],["transform",{"_index":43,"title":{},"body":{"injectables/ConvertDatePipe.html":{},"injectables/EventUpperCasePipe.html":{},"injectables/VenueUpperCasePipe.html":{}}}],["transform(name",{"_index":380,"title":{},"body":{"injectables/VenueUpperCasePipe.html":{}}}],["transform(value",{"_index":44,"title":{},"body":{"injectables/ConvertDatePipe.html":{},"injectables/EventUpperCasePipe.html":{}}}],["transformer",{"_index":416,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":282,"title":{},"body":{"classes/Venue.html":{}}}],["try",{"_index":351,"title":{},"body":{"classes/VenueRepository.html":{}}}],["twitter",{"_index":499,"title":{},"body":{"index.html":{}}}],["type",{"_index":50,"title":{},"body":{"injectables/ConvertDatePipe.html":{},"classes/CreateEventDto.html":{},"classes/CreateVenueDto.html":{},"classes/Event.html":{},"controllers/EventController.html":{},"classes/EventRepository.html":{},"injectables/EventService.html":{},"injectables/EventUpperCasePipe.html":{},"classes/FilterEventDto.html":{},"classes/UpdateEventDto.html":{},"classes/Venue.html":{},"controllers/VenueController.html":{},"classes/VenueRepository.html":{},"injectables/VenueService.html":{},"injectables/VenueUpperCasePipe.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":116,"title":{},"body":{"classes/Event.html":{},"classes/EventRepository.html":{},"classes/Venue.html":{},"classes/VenueRepository.html":{},"dependencies.html":{}}}],["typeormconfig",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeormmodule",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/EventModule.html":{},"modules/VenueModule.html":{}}}],["typeormmodule.forfeature([eventrepository",{"_index":199,"title":{},"body":{"modules/EventModule.html":{}}}],["typeormmodule.forfeature([venuerepository",{"_index":333,"title":{},"body":{"modules/VenueModule.html":{}}}],["typeormmodule.forroot(typeormconfig",{"_index":30,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":513,"title":{},"body":{"miscellaneous/variables.html":{}}}],["typescript",{"_index":456,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":112,"title":{},"body":{"classes/Event.html":{},"classes/Venue.html":{}}}],["unique",{"_index":291,"title":{},"body":{"classes/Venue.html":{}}}],["unit",{"_index":470,"title":{},"body":{"index.html":{}}}],["updated",{"_index":187,"title":{},"body":{"controllers/EventController.html":{}}}],["updateevent",{"_index":128,"title":{},"body":{"controllers/EventController.html":{},"classes/EventRepository.html":{},"injectables/EventService.html":{}}}],["updateevent(undefined",{"_index":207,"title":{},"body":{"classes/EventRepository.html":{}}}],["updateevent(updateeventdto",{"_index":143,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{}}}],["updateeventdto",{"_index":144,"title":{"classes/UpdateEventDto.html":{}},"body":{"controllers/EventController.html":{},"classes/EventRepository.html":{},"injectables/EventService.html":{},"classes/UpdateEventDto.html":{},"coverage.html":{}}}],["updateeventdto.name",{"_index":188,"title":{},"body":{"controllers/EventController.html":{}}}],["uppercase.pipe",{"_index":165,"title":{},"body":{"controllers/EventController.html":{},"controllers/VenueController.html":{}}}],["uppercase.pipe.ts",{"_index":257,"title":{},"body":{"injectables/EventUpperCasePipe.html":{},"injectables/VenueUpperCasePipe.html":{},"coverage.html":{}}}],["uppercase.pipe.ts:5",{"_index":258,"title":{},"body":{"injectables/EventUpperCasePipe.html":{},"injectables/VenueUpperCasePipe.html":{}}}],["usepipes",{"_index":154,"title":{},"body":{"controllers/EventController.html":{},"controllers/VenueController.html":{}}}],["usepipes(validationpipe",{"_index":177,"title":{},"body":{"controllers/EventController.html":{},"controllers/VenueController.html":{}}}],["username",{"_index":519,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validationpipe",{"_index":155,"title":{},"body":{"controllers/EventController.html":{},"controllers/VenueController.html":{}}}],["validator",{"_index":77,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateVenueDto.html":{},"classes/FilterEventDto.html":{},"classes/UpdateEventDto.html":{},"dependencies.html":{}}}],["value",{"_index":52,"title":{},"body":{"injectables/ConvertDatePipe.html":{},"injectables/EventUpperCasePipe.html":{},"miscellaneous/variables.html":{}}}],["value.split",{"_index":260,"title":{},"body":{"injectables/EventUpperCasePipe.html":{}}}],["varchar",{"_index":103,"title":{},"body":{"classes/Event.html":{}}}],["variable",{"_index":392,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":510,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["venue",{"_index":97,"title":{"classes/Venue.html":{}},"body":{"classes/Event.html":{},"controllers/EventController.html":{},"classes/EventRepository.html":{},"classes/Venue.html":{},"controllers/VenueController.html":{},"classes/VenueRepository.html":{},"injectables/VenueService.html":{},"coverage.html":{}}}],["venue.controller",{"_index":331,"title":{},"body":{"modules/VenueModule.html":{}}}],["venue.entity",{"_index":310,"title":{},"body":{"controllers/VenueController.html":{},"classes/VenueRepository.html":{},"injectables/VenueService.html":{}}}],["venue.events",{"_index":118,"title":{},"body":{"classes/Event.html":{}}}],["venue.events.push(event",{"_index":225,"title":{},"body":{"classes/EventRepository.html":{}}}],["venue.repository",{"_index":332,"title":{},"body":{"modules/VenueModule.html":{},"injectables/VenueService.html":{}}}],["venue.save",{"_index":226,"title":{},"body":{"classes/EventRepository.html":{}}}],["venue.service",{"_index":308,"title":{},"body":{"controllers/VenueController.html":{},"modules/VenueModule.html":{}}}],["venue/venue.module",{"_index":25,"title":{},"body":{"modules/AppModule.html":{}}}],["venuecontroller",{"_index":293,"title":{"controllers/VenueController.html":{}},"body":{"controllers/VenueController.html":{},"modules/VenueModule.html":{},"coverage.html":{}}}],["venuemodule",{"_index":13,"title":{"modules/VenueModule.html":{}},"body":{"modules/AppModule.html":{},"modules/VenueModule.html":{},"modules.html":{},"overview.html":{}}}],["venuename",{"_index":68,"title":{},"body":{"classes/CreateEventDto.html":{},"controllers/EventController.html":{},"classes/EventRepository.html":{},"injectables/EventService.html":{},"classes/UpdateEventDto.html":{},"classes/VenueRepository.html":{}}}],["venuerepository",{"_index":213,"title":{"classes/VenueRepository.html":{}},"body":{"classes/EventRepository.html":{},"modules/VenueModule.html":{},"classes/VenueRepository.html":{},"injectables/VenueService.html":{},"coverage.html":{}}}],["venuerepository.getvenuebyname(venuename",{"_index":218,"title":{},"body":{"classes/EventRepository.html":{}}}],["venues",{"_index":295,"title":{},"body":{"controllers/VenueController.html":{},"classes/VenueRepository.html":{}}}],["venueservice",{"_index":307,"title":{"injectables/VenueService.html":{}},"body":{"controllers/VenueController.html":{},"modules/VenueModule.html":{},"injectables/VenueService.html":{},"coverage.html":{},"overview.html":{}}}],["venueuppercasepipe",{"_index":311,"title":{"injectables/VenueUpperCasePipe.html":{}},"body":{"controllers/VenueController.html":{},"injectables/VenueUpperCasePipe.html":{},"coverage.html":{}}}],["void",{"_index":136,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{}}}],["watch",{"_index":465,"title":{},"body":{"index.html":{}}}],["website",{"_index":497,"title":{},"body":{"index.html":{}}}],["word",{"_index":262,"title":{},"body":{"injectables/EventUpperCasePipe.html":{},"injectables/VenueUpperCasePipe.html":{}}}],["word.charat(0).touppercase",{"_index":264,"title":{},"body":{"injectables/EventUpperCasePipe.html":{},"injectables/VenueUpperCasePipe.html":{}}}],["word.slice(1).tolowercase",{"_index":385,"title":{},"body":{"injectables/VenueUpperCasePipe.html":{}}}],["word.tolowercase().slice(1",{"_index":265,"title":{},"body":{"injectables/EventUpperCasePipe.html":{}}}],["wordsarray",{"_index":381,"title":{},"body":{"injectables/VenueUpperCasePipe.html":{}}}],["you'd",{"_index":486,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":14,"title":{},"body":{"modules/AppModule.html":{},"modules/EventModule.html":{},"modules/VenueModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nEventModule\n\nEventModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nEventModule->AppModule\n\n\n\n\n\nVenueModule\n\nVenueModule\n\nAppModule -->\n\nVenueModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            EventModule\n                        \n                        \n                            VenueModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { EventModule } from './event/event.module';\nimport { VenueModule } from './venue/venue.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { typeOrmConfig } from './config/typeorm.config';\n\n@Module({\n  imports: [EventModule, VenueModule, TypeOrmModule.forRoot(typeOrmConfig)],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConvertDatePipe.html":{"url":"injectables/ConvertDatePipe.html","title":"injectable - ConvertDatePipe","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ConvertDatePipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event/pipes/convertdate.pipe.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(value: string)\n                \n            \n\n\n            \n                \n                    Defined in src/event/pipes/convertdate.pipe.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, PipeTransform } from '@nestjs/common';\n\n@Injectable()\nexport class ConvertDatePipe implements PipeTransform {\n  transform(value: string) {\n    const newDate = new Date(value);\n\n    return newDate.toDateString();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateEventDto.html":{"url":"classes/CreateEventDto.html","title":"class - CreateEventDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateEventDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event/dto/createevent.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                date\n                            \n                            \n                                description\n                            \n                            \n                                name\n                            \n                            \n                                venueName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            date\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/event/dto/createevent.dto.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/event/dto/createevent.dto.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/event/dto/createevent.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            venueName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/event/dto/createevent.dto.ts:16\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class CreateEventDto {\n  @IsNotEmpty()\n  name: string;\n\n  @IsNotEmpty()\n  @IsString()\n  date: string;\n\n  @IsNotEmpty()\n  description: string;\n\n  @IsNotEmpty()\n  @IsString()\n  venueName: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateVenueDto.html":{"url":"classes/CreateVenueDto.html","title":"class - CreateVenueDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateVenueDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/venue/dto/venue.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                location\n                            \n                            \n                                name\n                            \n                            \n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsEmail()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/venue/dto/venue.dto.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            location\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/venue/dto/venue.dto.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/venue/dto/venue.dto.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            phone\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/venue/dto/venue.dto.ts:17\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString, IsEmail, IsOptional } from 'class-validator';\n\nexport default class CreateVenueDto {\n  @IsNotEmpty()\n  @IsString()\n  name: string;\n\n  @IsNotEmpty()\n  @IsString()\n  location: string;\n\n  @IsOptional()\n  @IsEmail()\n  email: string;\n\n  @IsOptional()\n  phone: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Event.html":{"url":"classes/Event.html","title":"class - Event","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Event\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event/event.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                date\n                            \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                venue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/event/event.entity.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            date\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/event/event.entity.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', length: 750})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/event/event.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/event/event.entity.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/event/event.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            venue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/event/event.entity.ts:34\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Entity,\n  BaseEntity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  CreateDateColumn,\n} from 'typeorm';\nimport Venue from 'src/venue/venue.entity';\n\n@Entity()\nexport class Event extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n  @Column()\n  name: string;\n\n  @Column({\n    type: 'varchar',\n    length: 750,\n  })\n  description: string;\n\n  @Column()\n  date: string;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @ManyToOne(\n    type => Venue,\n    venue => venue.events,\n  )\n  venue: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EventController.html":{"url":"controllers/EventController.html","title":"controller - EventController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EventController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event/event.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                events\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createEvent\n                            \n                            \n                                deleteEvent\n                            \n                            \n                                getEventById\n                            \n                            \n                                getEvents\n                            \n                            \n                                updateEvent\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createEvent\n                        \n                        \n                    \n                \n            \n            \n                \ncreateEvent(createEventDto: CreateEventDto, name: string, date: string, venueName: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/create')@UsePipes(ValidationPipe)\n                \n            \n\n            \n                \n                    Defined in src/event/event.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createEventDto\n                                    \n                                                CreateEventDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    date\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    venueName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteEvent\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteEvent(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')\n                \n            \n\n            \n                \n                    Defined in src/event/event.controller.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventById\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')\n                \n            \n\n            \n                \n                    Defined in src/event/event.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEvents\n                        \n                        \n                    \n                \n            \n            \n                \ngetEvents(filterEventDto: FilterEventDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/event/event.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filterEventDto\n                                    \n                                                FilterEventDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateEvent\n                        \n                        \n                    \n                \n            \n            \n                \nupdateEvent(updateEventDto: UpdateEventDto, id: number, name: string, date: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/:id/update')@UsePipes(ValidationPipe)\n                \n            \n\n            \n                \n                    Defined in src/event/event.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateEventDto\n                                    \n                                                UpdateEventDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    date\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Delete,\n  Query,\n  UsePipes,\n  ValidationPipe,\n  Logger,\n} from '@nestjs/common';\nimport { EventService } from './event.service';\nimport { CreateEventDto } from './dto/createevent.dto';\nimport { Event } from './event.entity';\nimport { FilterEventDto } from './dto/filter-event.dto';\nimport { EventUpperCasePipe } from './pipes/event-uppercase.pipe';\nimport { ConvertDatePipe } from './pipes/convertdate.pipe';\nimport { UpdateEventDto } from './dto/updatevent.dto';\n\n@Controller('events')\nexport class EventController {\n  private logger = new Logger('EventController');\n\n  constructor(private eventService: EventService) {}\n\n  @Get()\n  getEvents(@Query() filterEventDto: FilterEventDto): Promise {\n    return this.eventService.getEvents(filterEventDto);\n  }\n\n  @Get('/:id')\n  getEventById(@Param('id', ParseIntPipe) id: number) {\n    return this.eventService.getEventById(id);\n  }\n\n  @Post('/create')\n  @UsePipes(ValidationPipe)\n  createEvent(\n    @Body()\n    createEventDto: CreateEventDto,\n    @Body('name', EventUpperCasePipe)\n    name: string,\n    @Body('date', ConvertDatePipe)\n    date: string,\n    @Body('venueName', EventUpperCasePipe)\n    venueName: string,\n  ): Promise {\n    this.logger.verbose(`${name} on ${date} created for venue ${venueName}`);\n    return this.eventService.createEvent(createEventDto, name, date, venueName);\n  }\n\n  @Patch('/:id/update')\n  @UsePipes(ValidationPipe)\n  updateEvent(\n    @Body()\n    updateEventDto: UpdateEventDto,\n    @Param('id', ParseIntPipe) id: number,\n    @Body('name', EventUpperCasePipe)\n    name: string,\n    @Body('date', ConvertDatePipe)\n    date: string,\n  ): Promise {\n    this.logger.verbose(`Event updated for event ${updateEventDto.name}`);\n    return this.eventService.updateEvent(updateEventDto, id, name, date);\n  }\n\n  @Delete('/:id')\n  deleteEvent(@Param('id', ParseIntPipe) id: number): void {\n    this.logger.verbose(`Event with ${id} deleted`);\n    this.eventService.deleteEvent(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EventModule.html":{"url":"modules/EventModule.html","title":"module - EventModule","body":"\n                   \n\n\n\n\n    Modules\n    EventModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_EventModule\n\n\n\ncluster_EventModule_providers\n\n\n\n\nEventService\n\nEventService\n\n\n\nEventModule\n\nEventModule\n\nEventModule -->\n\nEventService->EventModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/event/event.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EventService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EventController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { EventController } from './event.controller';\nimport { EventService } from './event.service';\nimport { EventRepository } from './event.repository';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([EventRepository])],\n  controllers: [EventController],\n  providers: [EventService],\n})\nexport class EventModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EventRepository.html":{"url":"classes/EventRepository.html","title":"class - EventRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EventRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event/event.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createEvent\n                            \n                            \n                                    Async\n                                deleteEvent\n                            \n                            \n                                    Async\n                                getEvents\n                            \n                            \n                                    Async\n                                updateEvent\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createEvent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createEvent(undefined: CreateEventDto, name: string, date: string, venueName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/event/event.repository.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                CreateEventDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    date\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    venueName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteEvent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteEvent(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/event/event.repository.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getEvents\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEvents(filterEventDto: FilterEventDto)\n                \n            \n\n\n            \n                \n                    Defined in src/event/event.repository.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filterEventDto\n                                    \n                                                FilterEventDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateEvent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateEvent(undefined: UpdateEventDto, id: number, name: string, date: string)\n                \n            \n\n\n            \n                \n                    Defined in src/event/event.repository.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                UpdateEventDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    date\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository, Repository, getCustomRepository } from 'typeorm';\nimport { Event } from './event.entity';\nimport { CreateEventDto } from './dto/createevent.dto';\nimport { NotAcceptableException, NotFoundException } from '@nestjs/common';\nimport { FilterEventDto } from './dto/filter-event.dto';\nimport VenueRepository from 'src/venue/venue.repository';\nimport { UpdateEventDto } from './dto/updatevent.dto';\n\n@EntityRepository(Event)\nexport class EventRepository extends Repository {\n  async createEvent(\n    { description }: CreateEventDto,\n    name: string,\n    date: string,\n    venueName: string,\n  ): Promise {\n    const venueRepository = getCustomRepository(VenueRepository);\n\n    const venue = await venueRepository.getVenueByName(venueName);\n\n    if (!venue) {\n      throw new NotAcceptableException(\n        `Venue with name ${venueName} does not exist`,\n      );\n    }\n\n    const event = new Event();\n\n    event.name = name;\n    event.description = description;\n    event.date = date;\n\n    await event.save();\n    await venue.events.push(event);\n    await venue.save();\n\n    return event;\n  }\n\n  async getEvents(filterEventDto: FilterEventDto): Promise {\n    const query = this.createQueryBuilder('event').orderBy('id', 'ASC');\n    const search = filterEventDto.search;\n    if (search) {\n      query.where('(event.name LIKE :search)', {\n        search: `%${search}%`,\n      });\n    }\n\n    const events = await query.getMany();\n    return events;\n  }\n\n  async updateEvent(\n    { description }: UpdateEventDto,\n    id: number,\n    name: string,\n    date: string,\n  ): Promise {\n    const event = await this.findOne(id);\n\n    if (!event) {\n      throw new NotAcceptableException(`Event with ${id} is invalid`);\n    }\n\n    event.name = name;\n    event.date = date;\n    event.description = description;\n\n    event.save();\n    return event;\n  }\n\n  async deleteEvent(id: number): Promise {\n    const result = await this.delete(id);\n\n    if (result.affected === 0) {\n      throw new NotFoundException(`This event with id ${id} does not exist!`);\n    }\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EventService.html":{"url":"injectables/EventService.html","title":"injectable - EventService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  EventService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event/event.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createEvent\n                            \n                            \n                                deleteEvent\n                            \n                            \n                                getEventById\n                            \n                            \n                                getEvents\n                            \n                            \n                                updateEvent\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(eventRepository: EventRepository)\n                    \n                \n                        \n                            \n                                Defined in src/event/event.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        eventRepository\n                                                  \n                                                        \n                                                                        EventRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createEvent\n                        \n                        \n                    \n                \n            \n            \n                \ncreateEvent(createEventDto: CreateEventDto, name: string, date: string, venueName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/event/event.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createEventDto\n                                    \n                                                CreateEventDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    date\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    venueName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteEvent\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteEvent(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/event/event.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventById\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/event/event.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEvents\n                        \n                        \n                    \n                \n            \n            \n                \ngetEvents(filterEventDto: FilterEventDto)\n                \n            \n\n\n            \n                \n                    Defined in src/event/event.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filterEventDto\n                                    \n                                                FilterEventDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateEvent\n                        \n                        \n                    \n                \n            \n            \n                \nupdateEvent(updateEventDto: UpdateEventDto, id: number, name: string, date: string)\n                \n            \n\n\n            \n                \n                    Defined in src/event/event.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateEventDto\n                                    \n                                                UpdateEventDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    date\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotAcceptableException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { EventRepository } from './event.repository';\nimport { Event } from './event.entity';\nimport { CreateEventDto } from './dto/createevent.dto';\nimport { FilterEventDto } from './dto/filter-event.dto';\nimport { UpdateEventDto } from './dto/updatevent.dto';\n\n@Injectable()\nexport class EventService {\n  constructor(\n    @InjectRepository(EventRepository)\n    private eventRepository: EventRepository,\n  ) {}\n\n  createEvent(\n    createEventDto: CreateEventDto,\n    name: string,\n    date: string,\n    venueName: string,\n  ): Promise {\n    return this.eventRepository.createEvent(\n      createEventDto,\n      name,\n      date,\n      venueName,\n    );\n  }\n\n  getEvents(filterEventDto: FilterEventDto): Promise {\n    return this.eventRepository.getEvents(filterEventDto);\n  }\n\n  getEventById(id: number): Promise {\n    const event = this.eventRepository.findOne(id);\n\n    if (!event) {\n      throw new NotAcceptableException(`Event ${id} is invalid!`);\n    }\n    return event;\n  }\n\n  updateEvent(\n    updateEventDto: UpdateEventDto,\n    id: number,\n    name: string,\n    date: string,\n  ): Promise {\n    return this.eventRepository.updateEvent(updateEventDto, id, name, date);\n  }\n\n  deleteEvent(id: number): void {\n    this.eventRepository.deleteEvent(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EventUpperCasePipe.html":{"url":"injectables/EventUpperCasePipe.html","title":"injectable - EventUpperCasePipe","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  EventUpperCasePipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event/pipes/event-uppercase.pipe.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(value: string)\n                \n            \n\n\n            \n                \n                    Defined in src/event/pipes/event-uppercase.pipe.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, PipeTransform } from '@nestjs/common';\n\n@Injectable()\nexport class EventUpperCasePipe implements PipeTransform {\n  transform(value: string): string {\n    const newValue = value.split(' ');\n    const capitalWords: string[] = [];\n\n    for (let word of newValue) {\n      capitalWords.push(\n        word.charAt(0).toUpperCase() + word.toLowerCase().slice(1),\n      );\n    }\n\n    return capitalWords.join(' ');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilterEventDto.html":{"url":"classes/FilterEventDto.html","title":"class - FilterEventDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilterEventDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event/dto/filter-event.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                search\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            search\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/event/dto/filter-event.dto.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsOptional } from 'class-validator';\n\nexport class FilterEventDto {\n  @IsOptional()\n  @IsNotEmpty()\n  search: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateEventDto.html":{"url":"classes/UpdateEventDto.html","title":"class - UpdateEventDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateEventDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event/dto/updatevent.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                date\n                            \n                            \n                                description\n                            \n                            \n                                name\n                            \n                            \n                                venueName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            date\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/event/dto/updatevent.dto.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/event/dto/updatevent.dto.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/event/dto/updatevent.dto.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            venueName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/event/dto/updatevent.dto.ts:18\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString } from 'class-validator';\n\nexport class UpdateEventDto {\n  @IsOptional()\n  @IsString()\n  name: string;\n\n  @IsOptional()\n  @IsString()\n  date: string;\n\n  @IsOptional()\n  @IsString()\n  description: string;\n\n  @IsOptional()\n  @IsString()\n  venueName: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Venue.html":{"url":"classes/Venue.html","title":"class - Venue","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Venue\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/venue/venue.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                email\n                            \n                            \n                                events\n                            \n                            \n                                id\n                            \n                            \n                                location\n                            \n                            \n                                name\n                            \n                            \n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/venue/venue.entity.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/venue/venue.entity.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            events\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Event[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined, {eager: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/venue/venue.entity.ts:37\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/venue/venue.entity.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            location\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/venue/venue.entity.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/venue/venue.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            phone\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/venue/venue.entity.ts:22\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Entity,\n  BaseEntity,\n  PrimaryGeneratedColumn,\n  Column,\n  OneToMany,\n  CreateDateColumn,\n} from 'typeorm';\nimport { Event } from 'src/event/event.entity';\n\n@Entity()\nexport default class Venue extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n  @Column({\n    unique: true,\n  })\n  name: string;\n  @Column()\n  location: string;\n  @Column()\n  phone: string;\n\n  @Column()\n  email: string;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @OneToMany(\n    type => Event,\n    events => events.venue,\n    {\n      eager: true,\n    },\n  )\n  events: Event[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/VenueController.html":{"url":"controllers/VenueController.html","title":"controller - VenueController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  VenueController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/venue/venue.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                venues\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createNewVenue\n                            \n                            \n                                deleteVenue\n                            \n                            \n                                getAllVenues\n                            \n                            \n                                getVenueById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createNewVenue\n                        \n                        \n                    \n                \n            \n            \n                \ncreateNewVenue(createVenueDto: CreateVenueDto, name: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/create')@UsePipes(ValidationPipe)\n                \n            \n\n            \n                \n                    Defined in src/venue/venue.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createVenueDto\n                                    \n                                                CreateVenueDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteVenue\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteVenue(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')\n                \n            \n\n            \n                \n                    Defined in src/venue/venue.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAllVenues\n                        \n                        \n                    \n                \n            \n            \n                \ngetAllVenues()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/venue/venue.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getVenueById\n                        \n                        \n                    \n                \n            \n            \n                \ngetVenueById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')\n                \n            \n\n            \n                \n                    Defined in src/venue/venue.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  ParseIntPipe,\n  Delete,\n  UsePipes,\n  ValidationPipe,\n  Logger,\n} from '@nestjs/common';\nimport { VenueService } from './venue.service';\nimport CreateVenueDto from './dto/venue.dto';\nimport Venue from './venue.entity';\nimport { VenueUpperCasePipe } from './pipes/venue-uppercase.pipe';\n\n@Controller('venues')\nexport class VenueController {\n  private logger = new Logger('VenueController');\n\n  constructor(private venueService: VenueService) {}\n\n  @Get()\n  getAllVenues(): Promise {\n    return this.venueService.getAllVenus();\n  }\n\n  @Get('/:id')\n  getVenueById(@Param('id', ParseIntPipe) id: number): Promise {\n    this.logger.verbose(`Fetching venue by the id of ${id}`);\n    return this.venueService.getVenueById(id);\n  }\n\n  @Post('/create')\n  @UsePipes(ValidationPipe)\n  createNewVenue(\n    @Body()\n    createVenueDto: CreateVenueDto,\n    @Body('name', VenueUpperCasePipe) name: string,\n  ): Promise {\n    this.logger.verbose(\n      `Created venue with the name of ${name} and contact information of ${createVenueDto.phone}  ${createVenueDto.email}`,\n    );\n    return this.venueService.createVenue(createVenueDto, name);\n  }\n\n  @Delete('/:id')\n  deleteVenue(@Param('id', ParseIntPipe) id: number): Promise {\n    this.logger.verbose(`Deleted venue with ID of ${id}`);\n    return this.venueService.deleteVenue(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VenueModule.html":{"url":"modules/VenueModule.html","title":"module - VenueModule","body":"\n                   \n\n\n\n\n    Modules\n    VenueModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_VenueModule\n\n\n\ncluster_VenueModule_providers\n\n\n\n\nVenueService\n\nVenueService\n\n\n\nVenueModule\n\nVenueModule\n\nVenueModule -->\n\nVenueService->VenueModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/venue/venue.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            VenueService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            VenueController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { VenueController } from './venue.controller';\nimport { VenueService } from './venue.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport VenueRepository from './venue.repository';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([VenueRepository])],\n  controllers: [VenueController],\n  providers: [VenueService],\n})\nexport class VenueModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VenueRepository.html":{"url":"classes/VenueRepository.html","title":"class - VenueRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VenueRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/venue/venue.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createNewVenue\n                            \n                            \n                                    Async\n                                getAllVenues\n                            \n                            \n                                    Async\n                                getVenueByName\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createNewVenue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createNewVenue(undefined: CreateVenueDto, name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/venue/venue.repository.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                CreateVenueDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getAllVenues\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllVenues()\n                \n            \n\n\n            \n                \n                    Defined in src/venue/venue.repository.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getVenueByName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getVenueByName(venueName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/venue/venue.repository.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    venueName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository, Repository } from 'typeorm';\nimport Venue from './venue.entity';\nimport CreateVenueDto from './dto/venue.dto';\nimport {\n  ConflictException,\n  InternalServerErrorException,\n} from '@nestjs/common';\n\n@EntityRepository(Venue)\nexport default class VenueRepository extends Repository {\n  async getAllVenues(): Promise {\n    const query = this.createQueryBuilder('venue').orderBy('id', 'ASC');\n\n    const venues = await query.getMany();\n\n    return venues;\n  }\n\n  async getVenueByName(venueName: string): Promise {\n    const venue = await this.findOne({\n      name: venueName,\n    });\n\n    return venue;\n  }\n\n  async createNewVenue(\n    { location, phone, email }: CreateVenueDto,\n    name: string,\n  ): Promise {\n    const newVenue = new Venue();\n    newVenue.name = name;\n    newVenue.location = location;\n    newVenue.phone = phone;\n    newVenue.email = email;\n\n    try {\n      await newVenue.save();\n    } catch (error) {\n      if (error.code === '23505') {\n        throw new ConflictException(`Venue name ${name} already exist`);\n      } else {\n        throw new InternalServerErrorException();\n      }\n    }\n    return newVenue;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/VenueService.html":{"url":"injectables/VenueService.html","title":"injectable - VenueService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  VenueService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/venue/venue.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createVenue\n                            \n                            \n                                    Async\n                                deleteVenue\n                            \n                            \n                                getAllVenus\n                            \n                            \n                                    Async\n                                getVenueById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(venueRepository: VenueRepository)\n                    \n                \n                        \n                            \n                                Defined in src/venue/venue.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        venueRepository\n                                                  \n                                                        \n                                                                        VenueRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createVenue\n                        \n                        \n                    \n                \n            \n            \n                \ncreateVenue(createVenueDto: CreateVenueDto, name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/venue/venue.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createVenueDto\n                                    \n                                                CreateVenueDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteVenue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteVenue(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/venue/venue.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAllVenus\n                        \n                        \n                    \n                \n            \n            \n                \ngetAllVenus()\n                \n            \n\n\n            \n                \n                    Defined in src/venue/venue.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getVenueById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getVenueById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/venue/venue.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotAcceptableException,\n  NotFoundException,\n} from '@nestjs/common';\nimport VenueRepository from './venue.repository';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport Venue from './venue.entity';\nimport CreateVenueDto from './dto/venue.dto';\n\n@Injectable()\nexport class VenueService {\n  constructor(\n    @InjectRepository(Venue)\n    private venueRepository: VenueRepository,\n  ) {}\n\n  getAllVenus(): Promise {\n    return this.venueRepository.getAllVenues();\n  }\n\n  async getVenueById(id: number): Promise {\n    const venue = await this.venueRepository.findOne(id);\n\n    if (!venue) {\n      throw new NotAcceptableException(`Venue with id of:${id} not found`);\n    }\n\n    return venue;\n  }\n\n  createVenue(createVenueDto: CreateVenueDto, name: string): Promise {\n    return this.venueRepository.createNewVenue(createVenueDto, name);\n  }\n\n  async deleteVenue(id: number): Promise {\n    const result = await this.venueRepository.delete(id);\n\n    if (result.affected === 0) {\n      throw new NotFoundException(`Cannot find venue with id: ${id}`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/VenueUpperCasePipe.html":{"url":"injectables/VenueUpperCasePipe.html","title":"injectable - VenueUpperCasePipe","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  VenueUpperCasePipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/venue/pipes/venue-uppercase.pipe.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/venue/pipes/venue-uppercase.pipe.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, PipeTransform } from '@nestjs/common';\n\n@Injectable()\nexport class VenueUpperCasePipe implements PipeTransform {\n  transform(name: string): string {\n    const wordsArray: string[] = name.split(' ');\n    const capitalizedWords: string[] = [];\n\n    for (let word of wordsArray) {\n      capitalizedWords.push(\n        word.charAt(0).toUpperCase() + word.slice(1).toLowerCase(),\n      );\n    }\n\n    return capitalizedWords.join(' ');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/config/typeorm.config.ts\n            \n            variable\n            dbConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/typeorm.config.ts\n            \n            variable\n            typeOrmConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/event/dto/createevent.dto.ts\n            \n            class\n            CreateEventDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/event/dto/filter-event.dto.ts\n            \n            class\n            FilterEventDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/event/dto/updatevent.dto.ts\n            \n            class\n            UpdateEventDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/event/event.controller.ts\n            \n            controller\n            EventController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/event/event.entity.ts\n            \n            class\n            Event\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/event/event.repository.ts\n            \n            class\n            EventRepository\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/event/event.service.ts\n            \n            injectable\n            EventService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/event/pipes/convertdate.pipe.ts\n            \n            injectable\n            ConvertDatePipe\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/event/pipes/event-uppercase.pipe.ts\n            \n            injectable\n            EventUpperCasePipe\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/venue/dto/venue.dto.ts\n            \n            class\n            CreateVenueDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/venue/pipes/venue-uppercase.pipe.ts\n            \n            injectable\n            VenueUpperCasePipe\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/venue/venue.controller.ts\n            \n            controller\n            VenueController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/venue/venue.entity.ts\n            \n            class\n            Venue\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/venue/venue.repository.ts\n            \n            class\n            VenueRepository\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/venue/venue.service.ts\n            \n            injectable\n            VenueService\n            \n                0 %\n                (0/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^6.7.2\n        \n            @nestjs/core : ^6.7.2\n        \n            @nestjs/platform-express : ^6.7.2\n        \n            @nestjs/swagger : ^3.1.0\n        \n            @nestjs/typeorm : ^6.2.0\n        \n            cache-manager : ^2.10.1\n        \n            class-transformer : ^0.2.3\n        \n            class-validator : ^0.11.0\n        \n            compression : ^1.7.4\n        \n            config : ^3.2.4\n        \n            express-rate-limit : ^5.0.0\n        \n            helmet : ^3.21.2\n        \n            pg : ^7.14.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.0\n        \n            rxjs : ^6.5.3\n        \n            typeorm : ^0.2.20\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n    \n\n\n\n\n\n\n\n\n\n  \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\n  Nest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EventModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VenueModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_EventModule\n\n\n\ncluster_EventModule_providers\n\n\n\ncluster_VenueModule\n\n\n\ncluster_VenueModule_providers\n\n\n\n\nEventModule\n\nEventModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nEventModule->AppModule\n\n\n\n\n\nVenueModule\n\nVenueModule\n\nAppModule -->\n\nVenueModule->AppModule\n\n\n\n\n\nEventService\n\nEventService\n\nEventModule -->\n\nEventService->EventModule\n\n\n\n\n\nVenueService\n\nVenueService\n\nVenueModule -->\n\nVenueService->VenueModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    8 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            dbConfig   (src/.../typeorm.config.ts)\n                        \n                        \n                            typeOrmConfig   (src/.../typeorm.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/typeorm.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            dbConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : config.get('db')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            typeOrmConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     TypeOrmModuleOptions\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  type: dbConfig.type,\n  host: dbConfig.host,\n  port: dbConfig.port,\n  username: dbConfig.username,\n  password: dbConfig.password,\n  database: dbConfig.database,\n  entities: [__dirname + '/../**/*.entity.{js,ts}'],\n  synchronize: dbConfig.synchronize,\n  logging: dbConfig.logging,\n}\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
